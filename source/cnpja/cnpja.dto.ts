/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/** ErrorBadRequestDto */
export interface ErrorBadRequestDto {
  /**
   * C√≥digo do status HTTP.
   * @format integer
   * @example 400
   */
  code: number;
  /**
   * Mensagem de erro.
   * @format not empty
   * @example "request validation failed"
   */
  message: string;
  /**
   * Lista com as falhas de valida√ß√£o.
   * @example ["taxId must be a string that obeys cnpj verification algorithm"]
   */
  constraints: string[];
}

/** ErrorUnauthorizedDto */
export interface ErrorUnauthorizedDto {
  /**
   * C√≥digo do status HTTP.
   * @format integer
   * @example 401
   */
  code: number;
  /**
   * Mensagem de erro.
   * @format not empty
   * @example "invalid authentication"
   */
  message: string;
}

/** ErrorNotFoundDto */
export interface ErrorNotFoundDto {
  /**
   * C√≥digo do status HTTP.
   * @format integer
   * @example 404
   */
  code: number;
  /**
   * Mensagem de erro.
   * @format not empty
   * @example "tax id not registered at revenue service"
   */
  message: string;
}

/** ErrorTooManyRequestsDto */
export interface ErrorTooManyRequestsDto {
  /**
   * C√≥digo do status HTTP.
   * @format integer
   * @example 429
   */
  code: number;
  /**
   * Mensagem de erro.
   * @format not empty
   * @example "not enough credits"
   */
  message: string;
  /**
   * Cr√©ditos necess√°rios para completar a consulta.
   * @format integer
   * @example 3
   */
  required: number;
  /**
   * Cr√©ditos restantes em sua conta.
   * @format integer
   * @example 1
   */
  remaining: number;
}

/** ErrorInternalServerErrorDto */
export interface ErrorInternalServerErrorDto {
  /**
   * C√≥digo do status HTTP.
   * @format integer
   * @example 500
   */
  code: number;
  /**
   * Mensagem de erro.
   * @format not empty
   * @example "unexpected error"
   */
  message: string;
}

/** ErrorServiceUnavailableDto */
export interface ErrorServiceUnavailableDto {
  /**
   * C√≥digo do status HTTP.
   * @format integer
   * @example 503
   */
  code: number;
  /**
   * Mensagem de erro.
   * @format not empty
   * @example "revenue service is offline"
   */
  message: string;
}

/** ZipDto */
export interface ZipDto {
  /**
   * Data da √∫ltima atualiza√ß√£o.
   * @format iso8601
   * @example "2024-06-05T17:52:39.136Z"
   */
  updated: string;
  /**
   * C√≥digo do munic√≠pio conforme
   * [IBGE ü°≠](https://www.ibge.gov.br/explica/codigos-dos-municipios.php).
   * @format integer
   * @example 3550308
   */
  municipality: number;
  /**
   * C√≥digo de Endere√ßamento Postal.
   * @format numeric
   * @minLength 8
   * @maxLength 8
   * @example "01452922"
   */
  code: string;
  /**
   * Logradouro.
   * @format not empty
   * @example "Avenida Brigadeiro Faria Lima"
   */
  street: string;
  /**
   * N√∫mero.
   * @format not empty
   * @example "2369"
   */
  number: string;
  /**
   * Bairro ou distrito.
   * @format not empty
   * @example "Jardim Paulistano"
   */
  district: string;
  /**
   * Munic√≠pio.
   * @format not empty
   * @example "S√£o Paulo"
   */
  city: string;
  /**
   * Sigla da Unidade Federativa.
   * @example "SP"
   */
  state:
    | "AC"
    | "AL"
    | "AM"
    | "AP"
    | "BA"
    | "CE"
    | "DF"
    | "ES"
    | "GO"
    | "MA"
    | "MG"
    | "MS"
    | "MT"
    | "PA"
    | "PB"
    | "PE"
    | "PI"
    | "PR"
    | "RJ"
    | "RN"
    | "RO"
    | "RR"
    | "RS"
    | "SC"
    | "SP"
    | "SE"
    | "TO";
}

/** SuframaStatusDto */
export interface SuframaStatusDto {
  /**
   * C√≥digo da situa√ß√£o cadastral:
   * - `1`: Ativa.
   * - `2`: Inativa.
   * - `3`: Bloqueada.
   * - `4`: Cancelada.
   * - `5`: Cancelada Ag. Rec.
   * @format integer
   * @example 1
   */
  id: number;
  /**
   * Descri√ß√£o da situa√ß√£o cadastral.
   * @format not empty
   * @example "Ativa"
   */
  text: string;
}

/** NatureDto */
export interface NatureDto {
  /**
   * C√≥digo da natureza jur√≠dica conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/estrutura/natjur-estrutura/natureza-juridica-2021).
   * @format integer
   * @example 2062
   */
  id: number;
  /**
   * Descri√ß√£o da natureza jur√≠dica.
   * @format not empty
   * @example "Sociedade Empres√°ria Limitada"
   */
  text: string;
}

/** CountryDto */
export interface CountryDto {
  /**
   * C√≥digo do pa√≠s conforme [M49 ü°≠](https://unstats.un.org/unsd/methodology/m49/).
   * @format integer
   * @example 76
   */
  id: number;
  /**
   * Nome do pa√≠s.
   * @format not empty
   * @example "Brasil"
   */
  name: string;
}

/** AddressDto */
export interface AddressDto {
  /**
   * C√≥digo do munic√≠pio conforme
   * [IBGE ü°≠](https://www.ibge.gov.br/explica/codigos-dos-municipios.php).
   * @format integer
   * @example 3550308
   */
  municipality: number;
  /**
   * Logradouro.
   * @format not empty
   * @example "Avenida Brigadeiro Faria Lima"
   */
  street: string;
  /**
   * N√∫mero.
   * @format not empty
   * @example "2369"
   */
  number: string;
  /**
   * Bairro ou distrito.
   * @format not empty
   * @example "Jardim Paulistano"
   */
  district: string;
  /**
   * Munic√≠pio.
   * @format not empty
   * @example "S√£o Paulo"
   */
  city: string;
  /**
   * Sigla da Unidade Federativa.
   * @example "SP"
   */
  state:
    | "AC"
    | "AL"
    | "AM"
    | "AP"
    | "BA"
    | "CE"
    | "DF"
    | "ES"
    | "GO"
    | "MA"
    | "MG"
    | "MS"
    | "MT"
    | "PA"
    | "PB"
    | "PE"
    | "PI"
    | "PR"
    | "RJ"
    | "RN"
    | "RO"
    | "RR"
    | "RS"
    | "SC"
    | "SP"
    | "SE"
    | "TO";
  /**
   * Complemento.
   * @format not empty
   * @example "Conj 1102"
   */
  details: string;
  /**
   * C√≥digo de Endere√ßamento Postal.
   * @format numeric
   * @minLength 8
   * @maxLength 8
   * @example "01452922"
   */
  zip: string;
  /**
   * Latitude.
   * @format float
   * @example -23.5774994
   */
  latitude?: number;
  /**
   * Longitude.
   * @format float
   * @example -46.6864608
   */
  longitude?: number;
  /** Informa√ß√µes do pa√≠s. */
  country: CountryDto;
}

/** PhoneDto */
export interface PhoneDto {
  /**
   * Tipo do telefone:
   * - `LANDLINE`: Linha terrestre, telefone fixo.
   * - `MOBILE`: Linha m√≥vel, telefone celular.
   * @example "LANDLINE"
   */
  type: "LANDLINE" | "MOBILE";
  /**
   * C√≥digo de DDD.
   * @format numeric
   * @minLength 2
   * @maxLength 2
   * @example "11"
   */
  area: string;
  /**
   * N√∫mero.
   * @format numeric
   * @minLength 8
   * @maxLength 9
   * @example "971564144"
   */
  number: string;
}

/** EmailDto */
export interface EmailDto {
  /**
   * Tipo de propriedade do e-mail:
   * - `PERSONAL`: Pessoal, registrado em provedor gratuito.
   * - `CORPORATE`: Corporativo, registrado em provedor privado.
   * - `ACCOUNTING`: Contabilidade, dom√≠nio remete a empresas de contadores.
   * @example "ACCOUNTING"
   */
  ownership: "ACCOUNTING" | "CORPORATE" | "PERSONAL";
  /**
   * Endere√ßo de e-mail.
   * @format e-mail
   * @example "contato@cnpja.com"
   */
  address: string;
  /**
   * Dom√≠nio de registro.
   * @format not empty
   * @example "cnpja.com"
   */
  domain: string;
}

/** SuframaActivityDto */
export interface SuframaActivityDto {
  /**
   * C√≥digo da atividade econ√¥mica conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @format integer
   * @example 6311900
   */
  id: number;
  /**
   * Descri√ß√£o da atividade econ√¥mica.
   * @format not empty
   * @example "Tratamento de dados, provedores de servi√ßos de aplica√ß√£o e servi√ßos de hospedagem na internet"
   */
  text: string;
  /**
   * Indica se a atividade econ√¥mica √© exercida.
   * @example true
   */
  performed: boolean;
}

/** SuframaIncentiveDto */
export interface SuframaIncentiveDto {
  /**
   * Nome do tributo incentivado.
   * @example "IPI"
   */
  tribute: "ICMS" | "IPI";
  /**
   * Benef√≠cio aplicado ao incentivo.
   * @format not empty
   * @example "Isen√ß√£o"
   */
  benefit: string;
  /**
   * Finalidade do incentivo.
   * @format not empty
   * @example "Consumo Interno, Industrializa√ß√£o e Utiliza√ß√£o"
   */
  purpose: string;
  /**
   * Base legal do incentivo.
   * @format not empty
   * @example "Decreto 7.212 de 2010 (Art. 81)"
   */
  basis: string;
}

/** SuframaDto */
export interface SuframaDto {
  /**
   * N√∫mero do CNPJ ou CPF sem pontua√ß√£o.
   * @format cnpj|cpf
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * Data da √∫ltima atualiza√ß√£o.
   * @format iso8601
   * @example "2024-06-05T17:52:39.136Z"
   */
  updated: string;
  /**
   * N√∫mero da inscri√ß√£o SUFRAMA.
   * @format numeric
   * @example "200400029"
   */
  number: string;
  /**
   * Raz√£o social.
   * @format not empty
   * @example "CNPJA TECNOLOGIA LTDA"
   */
  name: string;
  /**
   * Data de inscri√ß√£o na SUFRAMA.
   * @format iso8601
   * @example "2020-01-01"
   */
  since: string;
  /**
   * Indica se o estabelecimento √© a Matriz.
   * @example true
   */
  head: boolean;
  /**
   * Indica se o projeto est√° aprovado.
   * @example true
   */
  approved: boolean;
  /**
   * Data de aprova√ß√£o do projeto.
   * @format iso8601
   * @example "2021-01-01"
   */
  approvalDate: string;
  /** Informa√ß√µes da situa√ß√£o cadastral. */
  status: SuframaStatusDto;
  /** Informa√ß√µes da natureza jur√≠dica. */
  nature: NatureDto;
  /** Informa√ß√µes do endere√ßo. */
  address: AddressDto;
  /** Lista de telefones. */
  phones: PhoneDto[];
  /** Lista de e-mails. */
  emails: EmailDto[];
  /** Informa√ß√µes da atividade econ√¥mica principal. */
  mainActivity: SuframaActivityDto;
  /** Lista de atividades econ√¥micas secund√°rias. */
  sideActivities: SuframaActivityDto[];
  /** Lista de incentivos fiscais. */
  incentives: SuframaIncentiveDto[];
}

/** Buffer */
export type Buffer = object;

/** SimplesSimeiHistoryDto */
export interface SimplesSimeiHistoryDto {
  /**
   * Data de in√≠cio do per√≠odo.
   * @format iso8601
   * @example "2012-12-26"
   */
  from: string;
  /**
   * Data de t√©rmino do per√≠odo.
   * @format iso8601
   * @example "2013-12-31"
   */
  until: string;
  /**
   * Motivo de encerramento.
   * @format not empty
   * @example "Exclu√≠da por Ato Administrativo praticado pela Receita Federal do Brasil"
   */
  text: string;
}

/** SimplesSimeiDto */
export interface SimplesSimeiDto {
  /**
   * Indica se optante ou enquadrado.
   * @example true
   */
  optant: boolean;
  /**
   * Data de inclus√£o no per√≠odo vigente.
   * @format iso8601
   * @example "2020-06-05"
   */
  since: string;
  /** Hist√≥rico de per√≠odos anteriores. */
  history?: SimplesSimeiHistoryDto[];
}

/** SimplesDto */
export interface SimplesDto {
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * Data da √∫ltima atualiza√ß√£o.
   * @format iso8601
   * @example "2024-06-05T17:52:39.136Z"
   */
  updated: string;
  /** Informa√ß√µes da op√ß√£o pelo Simples Nacional. */
  simples: SimplesSimeiDto;
  /** Informa√ß√µes do enquadramento no MEI. */
  simei: SimplesSimeiDto;
}

/** CompanySizeDto */
export interface CompanySizeDto {
  /**
   * C√≥digo do porte:
   * - `1`: Microempresa (ME).
   * - `3`: Empresa de Pequeno Porte (EPP).
   * - `5`: Demais.
   * @format integer
   * @example 1
   */
  id: number;
  /**
   * Sigla do porte.
   * @format not empty
   * @example "ME"
   */
  acronym: string;
  /**
   * Descri√ß√£o do porte.
   * @format not empty
   * @example "Microempresa"
   */
  text: string;
}

/** OfficeStatusDto */
export interface OfficeStatusDto {
  /**
   * C√≥digo da situa√ß√£o cadastral:
   * - `1`: Nula.
   * - `2`: Ativa.
   * - `3`: Suspensa.
   * - `4`: Inapta.
   * - `8`: Baixada.
   * @format integer
   * @example 2
   */
  id: number;
  /**
   * Descri√ß√£o da situa√ß√£o cadastral.
   * @format not empty
   * @example "Ativa"
   */
  text: string;
}

/** OfficeReasonDto */
export interface OfficeReasonDto {
  /**
   * C√≥digo do motivo da situa√ß√£o cadastral conforme
   * [Receita Federal ü°≠](http://www.consultas.cge.rj.gov.br/scadastral.pdf).
   * @format integer
   * @example 1
   */
  id: number;
  /**
   * Descri√ß√£o do motivo da situa√ß√£o cadastral.
   * @format not empty
   * @example "Extin√ß√£o Por Encerramento Liquida√ß√£o Volunt√°ria"
   */
  text: string;
}

/** OfficeSpecialDto */
export interface OfficeSpecialDto {
  /**
   * C√≥digo da situa√ß√£o especial conforme
   * [Receita Federal ü°≠](http://www38.receita.fazenda.gov.br/cadsincnac/jsp/coleta/ajuda/topicos/Eventos_de_Alteracao.htm).
   * @format integer
   * @example 416
   */
  id: number;
  /**
   * Descri√ß√£o da situa√ß√£o especial.
   * @format not empty
   * @example "In√≠cio de Liquida√ß√£o Judicial"
   */
  text: string;
}

/** ActivityDto */
export interface ActivityDto {
  /**
   * C√≥digo da atividade econ√¥mica conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @format integer
   * @example 6311900
   */
  id: number;
  /**
   * Descri√ß√£o da atividade econ√¥mica.
   * @format not empty
   * @example "Tratamento de dados, provedores de servi√ßos de aplica√ß√£o e servi√ßos de hospedagem na internet"
   */
  text: string;
}

/** RoleDto */
export interface RoleDto {
  /**
   * C√≥digo da qualifica√ß√£o conforme
   * [Receita Federal ü°≠](http://www.consultas.cge.rj.gov.br/codsocio.pdf).
   * @format integer
   * @example 49
   */
  id: number;
  /**
   * Descri√ß√£o da qualifica√ß√£o.
   * @format not empty
   * @example "S√≥cio-Administrador"
   */
  text: string;
}

/** PersonBaseDto */
export interface PersonBaseDto {
  /**
   * C√≥digo da pessoa.
   * @format uuid
   * @example "1e5ed433-0f39-4309-8e85-8d21a571b212"
   */
  id: string;
  /**
   * Tipo da pessoa:
   * - `NATURAL`: Pessoa f√≠sica.
   * - `LEGAL`: Pessoa jur√≠dica.
   * - `FOREIGN`: Pessoa residente no exterior.
   * - `UNKNOWN`: Pessoa desconhecida.
   * @example "NATURAL"
   */
  type: "LEGAL" | "NATURAL" | "FOREIGN" | "UNKNOWN";
  /**
   * Nome ou raz√£o social.
   * @format not empty
   * @example "Jo√£o Silva"
   */
  name: string;
  /**
   * CPF ou CNPJ, presente quando `type == 'NATURAL' | 'LEGAL'`.
   * @format not empty
   * @example "***123456**"
   */
  taxId?: string;
  /**
   * Faixa et√°ria, presente quando `type == 'NATURAL'`.
   * @example "31-40"
   */
  age?: "0-12" | "13-20" | "21-30" | "31-40" | "41-50" | "51-60" | "61-70" | "71-80" | "81+";
  /** Pa√≠s de origem, presente quando `type == 'FOREIGN'`. */
  country?: CountryDto;
}

/** MemberAgentDto */
export interface MemberAgentDto {
  /** Informa√ß√µes da pessoa representante legal. */
  person: PersonBaseDto;
  /** Informa√ß√µes da qualifica√ß√£o do representante legal. */
  role: RoleDto;
}

/** RfbMemberDto */
export interface RfbMemberDto {
  /**
   * Data de entrada na sociedade.
   * @format iso8601
   * @example "2020-06-05"
   */
  since: string;
  /** Informa√ß√µes da qualifica√ß√£o. */
  role: RoleDto;
  /** Informa√ß√µes do s√≥cio ou administrador. */
  person: PersonBaseDto;
  /** Informa√ß√µes do representante legal, presente quando aplic√°vel na qualifica√ß√£o. */
  agent: MemberAgentDto;
}

/** RfbDto */
export interface RfbDto {
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * Data da √∫ltima atualiza√ß√£o.
   * @format iso8601
   * @example "2024-06-05T17:52:39.136Z"
   */
  updated: string;
  /**
   * Raz√£o social.
   * @format not empty
   * @example "CNPJA TECNOLOGIA LTDA"
   */
  name: string;
  /**
   * Ente federativo respons√°vel, presente quando `nature.id < 2000`.
   * @format not empty
   * @example "Uniao"
   */
  jurisdiction?: string;
  /**
   * Capital social
   * @format float
   * @example 1000
   */
  equity: number;
  /** Informa√ß√µes da natureza jur√≠dica. */
  nature: NatureDto;
  /** Informa√ß√µes do porte. */
  size: CompanySizeDto;
  /**
   * Nome fantasia.
   * @format not empty
   * @example "CNPJA"
   */
  alias: string;
  /**
   * Data de abertura.
   * @format iso8601
   * @example "2020-06-05"
   */
  founded: string;
  /**
   * Indica se o estabelecimento √© a Matriz.
   * @example true
   */
  head: boolean;
  /**
   * Data da situa√ß√£o cadastral.
   * @format iso8601
   * @example "2020-06-05"
   */
  statusDate: string;
  /** Informa√ß√µes da situa√ß√£o cadastral. */
  status: OfficeStatusDto;
  /** Informa√ß√µes do motivo da situa√ß√£o cadastral, presente quando `status.id != 2`. */
  reason?: OfficeReasonDto;
  /**
   * Data da situa√ß√£o especial.
   * @format iso8601
   * @example "2022-01-01"
   */
  specialDate?: string;
  /** Informa√ß√µes da situa√ß√£o especial, presente quando `specialDate != undefined`. */
  special?: OfficeSpecialDto;
  /** Informa√ß√µes do endere√ßo. */
  address: AddressDto;
  /** Lista de telefones. */
  phones: PhoneDto[];
  /** Lista de e-mails. */
  emails: EmailDto[];
  /** Informa√ß√µes da atividade econ√¥mica principal. */
  mainActivity: ActivityDto;
  /** Lista de atividades econ√¥micas secund√°rias. */
  sideActivities: ActivityDto[];
  /** Quadro de s√≥cios e administradores. */
  members: RfbMemberDto[];
}

/** PersonMemberCompanyDto */
export interface PersonMemberCompanyDto {
  /**
   * C√≥digo da empresa, idem aos oito primeiros caracteres do CNPJ.
   * @format integer
   * @example 37335118
   */
  id: number;
  /**
   * Raz√£o social.
   * @format not empty
   * @example "CNPJA TECNOLOGIA LTDA"
   */
  name: string;
  /**
   * Ente federativo respons√°vel, presente quando `nature.id < 2000`.
   * @format not empty
   * @example "Uniao"
   */
  jurisdiction?: string;
  /**
   * Capital social
   * @format float
   * @example 1000
   */
  equity: number;
  /** Informa√ß√µes da natureza jur√≠dica. */
  nature: NatureDto;
  /** Informa√ß√µes do porte. */
  size: CompanySizeDto;
}

/** PersonMemberDto */
export interface PersonMemberDto {
  /**
   * Data de entrada na sociedade.
   * @format iso8601
   * @example "2020-06-05"
   */
  since: string;
  /** Informa√ß√µes da qualifica√ß√£o. */
  role: RoleDto;
  /** Informa√ß√µes do representante legal, presente quando aplic√°vel na qualifica√ß√£o. */
  agent?: MemberAgentDto;
  /** Informa√ß√µes da empresa. */
  company: PersonMemberCompanyDto;
}

/** PersonDto */
export interface PersonDto {
  /**
   * C√≥digo da pessoa.
   * @format uuid
   * @example "1e5ed433-0f39-4309-8e85-8d21a571b212"
   */
  id: string;
  /**
   * Tipo da pessoa:
   * - `NATURAL`: Pessoa f√≠sica.
   * - `LEGAL`: Pessoa jur√≠dica.
   * - `FOREIGN`: Pessoa residente no exterior.
   * - `UNKNOWN`: Pessoa desconhecida.
   * @example "NATURAL"
   */
  type: "LEGAL" | "NATURAL" | "FOREIGN" | "UNKNOWN";
  /**
   * Nome ou raz√£o social.
   * @format not empty
   * @example "Jo√£o Silva"
   */
  name: string;
  /**
   * CPF ou CNPJ, presente quando `type == 'NATURAL' | 'LEGAL'`.
   * @format not empty
   * @example "***123456**"
   */
  taxId?: string;
  /**
   * Faixa et√°ria, presente quando `type == 'NATURAL'`.
   * @example "31-40"
   */
  age?: "0-12" | "13-20" | "21-30" | "31-40" | "41-50" | "51-60" | "61-70" | "71-80" | "81+";
  /** Pa√≠s de origem, presente quando `type == 'FOREIGN'`. */
  country?: CountryDto;
  /** Lista de sociedades participantes. */
  membership: PersonMemberDto[];
}

/** PersonPageDto */
export interface PersonPageDto {
  /**
   * Token da pr√≥xima p√°gina.
   * @format not empty
   * @minLength 32
   * @maxLength 32
   * @example "8d47bdcbde4a7a2d4a98d5f555a19701"
   */
  next: string;
  /**
   * Quantidade de registros lidos.
   * @format integer
   * @min 1
   * @max 100
   * @example 100
   */
  limit: number;
  /**
   * Quantidade de registros dispon√≠veis.
   * @format integer
   * @min 0
   * @example 345
   */
  count: number;
  /** Lista de pessoas que obedecem aos crit√©rios de pesquisa. */
  records: PersonDto[];
}

/** MemberDto */
export interface MemberDto {
  /**
   * Data de entrada na sociedade.
   * @format iso8601
   * @example "2020-06-05"
   */
  since: string;
  /** Informa√ß√µes do s√≥cio ou administrador. */
  person: PersonBaseDto;
  /** Informa√ß√µes da qualifica√ß√£o. */
  role: RoleDto;
  /** Informa√ß√µes do representante legal, presente quando aplic√°vel na qualifica√ß√£o. */
  agent?: MemberAgentDto;
}

/** OfficeCompanyDto */
export interface OfficeCompanyDto {
  /**
   * C√≥digo da empresa, idem aos oito primeiros caracteres do CNPJ.
   * @format integer
   * @example 37335118
   */
  id: number;
  /**
   * Raz√£o social.
   * @format not empty
   * @example "CNPJA TECNOLOGIA LTDA"
   */
  name: string;
  /**
   * Ente federativo respons√°vel, presente quando `nature.id < 2000`.
   * @format not empty
   * @example "Uniao"
   */
  jurisdiction?: string;
  /**
   * Capital social
   * @format float
   * @example 1000
   */
  equity: number;
  /** Informa√ß√µes da natureza jur√≠dica. */
  nature: NatureDto;
  /** Informa√ß√µes do porte. */
  size: CompanySizeDto;
  /** Informa√ß√µes da op√ß√£o pelo Simples Nacional. */
  simples?: SimplesSimeiDto;
  /** Informa√ß√µes do enquadramento no MEI. */
  simei?: SimplesSimeiDto;
  /** Quadro de s√≥cios e administradores. */
  members: MemberDto[];
}

/** RegistrationStatusDto */
export interface RegistrationStatusDto {
  /**
   * C√≥digo da situa√ß√£o cadastral:
   * - `1`: Sem restri√ß√£o.
   * - `2`: Bloqueado como destinat√°rio na UF.
   * - `3`: Vedada opera√ß√£o como destinat√°rio na UF.
   * @format integer
   * @example 2
   */
  id: number;
  /**
   * Descri√ß√£o da situa√ß√£o cadastral.
   * @format not empty
   * @example "Bloqueado como destinat√°rio na UF"
   */
  text: string;
}

/** RegistrationTypeDto */
export interface RegistrationTypeDto {
  /**
   * C√≥digo do tipo:
   * - `1`: IE Normal.
   * - `2`: IE Substituto Tribut√°rio.
   * - `3`: IE N√£o Contribuinte (Canteiro de Obras, IE Virtual, outros).
   * - `4`: IE de Produtor Rural.
   * @format integer
   * @example 2
   */
  id: number;
  /**
   * Descri√ß√£o do tipo.
   * @format not empty
   * @example "IE Substituto Tribut√°rio"
   */
  text: string;
}

/** RegistrationDto */
export interface RegistrationDto {
  /**
   * N√∫mero da Inscri√ß√£o Estadual.
   * @format numeric
   * @minLength 8
   * @maxLength 14
   * @example "0962101427"
   */
  number: string;
  /**
   * Unidade Federativa de registro.
   * @example "RS"
   */
  state:
    | "AC"
    | "AL"
    | "AM"
    | "AP"
    | "BA"
    | "CE"
    | "DF"
    | "ES"
    | "GO"
    | "MA"
    | "MG"
    | "MS"
    | "MT"
    | "PA"
    | "PB"
    | "PE"
    | "PI"
    | "PR"
    | "RJ"
    | "RN"
    | "RO"
    | "RR"
    | "RS"
    | "SC"
    | "SP"
    | "SE"
    | "TO";
  /**
   * Indica se habilitada como contribuinte.
   * @example true
   */
  enabled: boolean;
  /**
   * Data da situa√ß√£o cadastral.
   * @format iso8601
   * @example "2021-01-21"
   */
  statusDate: string;
  /** Situa√ß√£o cadastral da inscri√ß√£o. */
  status: RegistrationStatusDto;
  /** Tipo da inscri√ß√£o. */
  type: RegistrationTypeDto;
}

/** OfficeSuframaDto */
export interface OfficeSuframaDto {
  /**
   * N√∫mero da inscri√ß√£o SUFRAMA.
   * @format numeric
   * @example "200400029"
   */
  number: string;
  /**
   * Data de inscri√ß√£o na SUFRAMA.
   * @format iso8601
   * @example "2020-01-01"
   */
  since: string;
  /**
   * Indica se o projeto est√° aprovado.
   * @example true
   */
  approved: boolean;
  /**
   * Data de aprova√ß√£o do projeto.
   * @format iso8601
   * @example "2021-01-01"
   */
  approvalDate: string;
  /** Informa√ß√µes da situa√ß√£o cadastral. */
  status: SuframaStatusDto;
  /** Lista de incentivos fiscais. */
  incentives: SuframaIncentiveDto[];
}

/** OfficeLinkDto */
export interface OfficeLinkDto {
  /**
   * Tipo de arquivo a qual o link se refere.
   * @example "RFB_CERTIFICATE"
   */
  type:
    | "RFB_CERTIFICATE"
    | "SIMPLES_CERTIFICATE"
    | "CCC_CERTIFICATE"
    | "SUFRAMA_CERTIFICATE"
    | "OFFICE_MAP"
    | "OFFICE_STREET";
  /**
   * URL p√∫blica de acesso ao arquivo.
   * @format not empty
   * @example "https://api.cnpja.com/rfb/certificate?taxId=37335118000180&signature=eyJ...vcIlg"
   */
  url: string;
}

/** OfficeDto */
export interface OfficeDto {
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * Data da √∫ltima atualiza√ß√£o.
   * @format iso8601
   * @example "2024-06-05T17:52:39.136Z"
   */
  updated: string;
  /** Informa√ß√µes da empresa. */
  company: OfficeCompanyDto;
  /**
   * Nome fantasia.
   * @format not empty
   * @example "CNPJA"
   */
  alias: string;
  /**
   * Data de abertura.
   * @format iso8601
   * @example "2020-06-05"
   */
  founded: string;
  /**
   * Indica se o estabelecimento √© a Matriz.
   * @example true
   */
  head: boolean;
  /**
   * Data da situa√ß√£o cadastral.
   * @format iso8601
   * @example "2020-06-05"
   */
  statusDate: string;
  /** Informa√ß√µes da situa√ß√£o cadastral. */
  status: OfficeStatusDto;
  /** Informa√ß√µes do motivo da situa√ß√£o cadastral, presente quando `status.id != 2`. */
  reason?: OfficeReasonDto;
  /**
   * Data da situa√ß√£o especial.
   * @format iso8601
   * @example "2022-01-01"
   */
  specialDate?: string;
  /** Informa√ß√µes da situa√ß√£o especial, presente quando `specialDate != undefined`. */
  special?: OfficeSpecialDto;
  /** Informa√ß√µes do endere√ßo. */
  address: AddressDto;
  /** Lista de telefones. */
  phones: PhoneDto[];
  /** Lista de e-mails. */
  emails: EmailDto[];
  /** Informa√ß√µes da atividade econ√¥mica principal. */
  mainActivity: ActivityDto;
  /** Lista de atividades econ√¥micas secund√°rias. */
  sideActivities: ActivityDto[];
  /** Lista de Inscri√ß√µes Estaduais. */
  registrations?: RegistrationDto[];
  /** Lista de inscri√ß√µes SUFRAMA */
  suframa?: OfficeSuframaDto[];
  /** Lista de links para arquivos. */
  links?: OfficeLinkDto[];
}

/** OfficePageRecordDto */
export interface OfficePageRecordDto {
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * Data da √∫ltima atualiza√ß√£o.
   * @format iso8601
   * @example "2024-06-05T17:52:39.136Z"
   */
  updated: string;
  /** Informa√ß√µes da empresa. */
  company: OfficeCompanyDto;
  /**
   * Nome fantasia.
   * @format not empty
   * @example "CNPJA"
   */
  alias: string;
  /**
   * Data de abertura.
   * @format iso8601
   * @example "2020-06-05"
   */
  founded: string;
  /**
   * Indica se o estabelecimento √© a Matriz.
   * @example true
   */
  head: boolean;
  /**
   * Data da situa√ß√£o cadastral.
   * @format iso8601
   * @example "2020-06-05"
   */
  statusDate: string;
  /** Informa√ß√µes da situa√ß√£o cadastral. */
  status: OfficeStatusDto;
  /** Informa√ß√µes do motivo da situa√ß√£o cadastral, presente quando `status.id != 2`. */
  reason?: OfficeReasonDto;
  /**
   * Data da situa√ß√£o especial.
   * @format iso8601
   * @example "2022-01-01"
   */
  specialDate?: string;
  /** Informa√ß√µes da situa√ß√£o especial, presente quando `specialDate != undefined`. */
  special?: OfficeSpecialDto;
  /** Informa√ß√µes do endere√ßo. */
  address: AddressDto;
  /** Lista de telefones. */
  phones: PhoneDto[];
  /** Lista de e-mails. */
  emails: EmailDto[];
  /** Informa√ß√µes da atividade econ√¥mica principal. */
  mainActivity: ActivityDto;
  /** Lista de atividades econ√¥micas secund√°rias. */
  sideActivities: ActivityDto[];
}

/** OfficePageDto */
export interface OfficePageDto {
  /**
   * Token da pr√≥xima p√°gina.
   * @format not empty
   * @minLength 32
   * @maxLength 32
   * @example "8d47bdcbde4a7a2d4a98d5f555a19701"
   */
  next: string;
  /**
   * Quantidade de registros lidos.
   * @format integer
   * @min 1
   * @max 100
   * @example 100
   */
  limit: number;
  /**
   * Quantidade de registros dispon√≠veis.
   * @format integer
   * @min 0
   * @example 345
   */
  count: number;
  /** Lista de estabelecimentos que obedecem aos crit√©rios de pesquisa. */
  records: OfficePageRecordDto[];
}

/** ListQueryDto */
export interface ListQueryDto {
  /**
   * Termos a serem inclu√≠dos na raz√£o social ou nome fantasia, separados por espa√ßo para correspond√™ncia
   * no mesmo estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "CNPJ√°,Banco do Brasil,AMBEV S/A"
   */
  "names.in"?: string[];
  /**
   * Termos a serem exclu√≠dos na raz√£o social ou nome fantasia, separados por espa√ßo para correspond√™ncia
   * no mesmo estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "EI,Eireli,LTDA"
   */
  "names.nin"?: string[];
  /**
   * Termos a serem inclu√≠dos na raz√£o social, separados por espa√ßo para correspond√™ncia na mesma empresa,
   * ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "CNPJ√°,Banco do Brasil,AMBEV S/A"
   */
  "company.name.in"?: string[];
  /**
   * Termos a serem exclu√≠dos na raz√£o social, separados por espa√ßo para correspond√™ncia na mesma empresa,
   * ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "EI,Eireli,LTDA"
   */
  "company.name.nin"?: string[];
  /**
   * Capital social maior ou igual ao valor especificado.
   * @format float
   * @min 0
   * @example 12345.67
   */
  "company.equity.gte"?: number;
  /**
   * Capital social menor ou igual ao valor especificado.
   * @format float
   * @min 0
   * @example 98765.43
   */
  "company.equity.lte"?: number;
  /**
   * C√≥digos das naturezas jur√≠dicas a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/estrutura/natjur-estrutura/natureza-juridica-2021).
   * @example "1015,2011,3034"
   */
  "company.nature.id.in"?: number[];
  /**
   * C√≥digos das naturezas jur√≠dicas a serem exclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/estrutura/natjur-estrutura/natureza-juridica-2021).
   * @example "1015,2011,3034"
   */
  "company.nature.id.nin"?: number[];
  /**
   * C√≥digos dos portes a serem inclu√≠dos, separados por v√≠rgula:
   * - `1`: Microempresa (ME).
   * - `3`: Empresa de Pequeno Porte (EPP).
   * - `5`: Demais.
   * @example "1,3"
   */
  "company.size.id.in"?: number[];
  /**
   * Indicador de op√ß√£o pelo Simples Nacional:
   * - `true`: Apenas empresas optantes.
   * - `false`: Apenas empresas n√£o optantes.
   * @example true
   */
  "company.simples.optant.eq"?: boolean;
  /**
   * Data de op√ß√£o pelo Simples Nacional maior ou igual a especificada.
   * @format iso8601
   * @example "2018-01-01"
   */
  "company.simples.since.gte"?: string;
  /**
   * Data de op√ß√£o pelo Simples Nacional menor ou igual a especificada.
   * @format iso8601
   * @example "2020-12-31"
   */
  "company.simples.since.lte"?: string;
  /**
   * Indicador de enquadramento no MEI:
   * - `true`: Apenas empresas enquadradas.
   * - `false`: Apenas empresas n√£o enquadradas.
   * @example true
   */
  "company.simei.optant.eq"?: boolean;
  /**
   * Data de enquadramento no MEI maior ou igual a especificada.
   * @format iso8601
   * @example "2018-01-01"
   */
  "company.simei.since.gte"?: string;
  /**
   * Data de enquadramento no MEI menor ou igual a especificada.
   * @format iso8601
   * @example "2020-12-31"
   */
  "company.simei.since.lte"?: string;
  /**
   * Identificadores de listas de CNPJs a serem exclu√≠dos, separados por v√≠rgula.
   * @example "37505509-b2a5-42c2-94f4-aa99d2033bf5"
   */
  "taxId.nin"?: string[];
  /**
   * Termos a serem inclu√≠dos no nome fantasia, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "CNPJ√°,Banco do Brasil,AMBEV S/A"
   */
  "alias.in"?: string[];
  /**
   * Termos a serem exclu√≠dos no nome fantasia, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Eireli,LTDA"
   */
  "alias.nin"?: string[];
  /**
   * Data de abertura maior ou igual a especificada.
   * @format iso8601
   * @example "2018-01-01"
   */
  "founded.gte"?: string;
  /**
   * Data de abertura menor ou igual a especificada.
   * @format iso8601
   * @example "2020-12-31"
   */
  "founded.lte"?: string;
  /**
   * Indicador de estabelecimento matriz:
   * - `true`: Apenas matrizes.
   * - `false`: Apenas filiais.
   * @example true
   */
  "head.eq"?: boolean;
  /**
   * Data da situa√ß√£o cadastral maior ou igual a especificada.
   * @format iso8601
   * @example "2018-01-01"
   */
  "statusDate.gte"?: string;
  /**
   * Data da situa√ß√£o cadastral menor ou igual a especificada.
   * @format iso8601
   * @example "2020-12-31"
   */
  "statusDate.lte"?: string;
  /**
   * C√≥digos das situa√ß√µes cadastrais a serem inclu√≠dos, separados por v√≠rgula:
   * - `1`: Nula.
   * - `2`: Ativa.
   * - `3`: Suspensa.
   * - `4`: Inapta.
   * - `8`: Baixada.
   * @example "3,4,8"
   */
  "status.id.in"?: number[];
  /**
   * C√≥digos dos motivos das situa√ß√µes cadastrais a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [Receita Federal ü°≠](http://www.consultas.cge.rj.gov.br/scadastral.pdf).
   * @example "1,3,5"
   */
  "reason.id.in"?: number[];
  /**
   * Data da situa√ß√£o especial maior ou igual a especificada.
   * @format iso8601
   * @example "2018-01-01"
   */
  "specialDate.gte"?: string;
  /**
   * Data da situa√ß√£o especial menor ou igual a especificada.
   * @format iso8601
   * @example "2020-12-31"
   */
  "specialDate.lte"?: string;
  /**
   * C√≥digos das situa√ß√µes especiais a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [Receita Federal ü°≠](http://www38.receita.fazenda.gov.br/cadsincnac/jsp/coleta/ajuda/topicos/Eventos_de_Alteracao.htm).
   * @example "405,410,417"
   */
  "special.id.in"?: number[];
  /**
   * C√≥digos dos munic√≠pios a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://www.ibge.gov.br/explica/codigos-dos-municipios.php).
   * @example "4106902,4205407,4314902"
   */
  "address.municipality.in"?: number[];
  /**
   * C√≥digos dos munic√≠pios a serem exclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://www.ibge.gov.br/explica/codigos-dos-municipios.php).
   * @example "4106902,4205407,4314902"
   */
  "address.municipality.nin"?: number[];
  /**
   * Termos a serem inclu√≠dos no logradouro, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Avenida Copacabana,Rua das Pedras,Rua Oscar Freire"
   */
  "address.street.in"?: string[];
  /**
   * Termos a serem exclu√≠dos no logradouro, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Avenida Copacabana,Rua das Pedras,Rua Oscar Freire"
   */
  "address.street.nin"?: string[];
  /**
   * N√∫meros do logradouro a serem inclu√≠dos, separados por v√≠rgula.
   * @example "10,435,10387"
   */
  "address.number.in"?: string[];
  /**
   * N√∫meros do logradouro a serem exclu√≠dos, separados por v√≠rgula.
   * @example "10,435,10387"
   */
  "address.number.nin"?: string[];
  /**
   * Termos a serem inclu√≠dos no complemento, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Cj 1403,Andar 4,Bloco C"
   */
  "address.details.in"?: string[];
  /**
   * Termos a serem exclu√≠dos no complemento, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Cj 1403,Andar 4,Bloco C"
   */
  "address.details.nin"?: string[];
  /**
   * Termos a serem inclu√≠dos no bairro, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Leblon,Vila Ol√≠mpia,Belvedere"
   */
  "address.district.in"?: string[];
  /**
   * Termos a serem exclu√≠dos no bairro, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Leblon,Vila Ol√≠mpia,Belvedere"
   */
  "address.district.nin"?: string[];
  /**
   * Unidades federativas a serem inclu√≠das, separadas por v√≠rgula.
   * @example "ES,RJ,SP"
   */
  "address.state.in"?: (
    | "AC"
    | "AL"
    | "AM"
    | "AP"
    | "BA"
    | "CE"
    | "DF"
    | "ES"
    | "GO"
    | "MA"
    | "MG"
    | "MS"
    | "MT"
    | "PA"
    | "PB"
    | "PE"
    | "PI"
    | "PR"
    | "RJ"
    | "RN"
    | "RO"
    | "RR"
    | "RS"
    | "SC"
    | "SP"
    | "SE"
    | "TO"
  )[];
  /**
   * C√≥digos de endere√ßamento postal a serem inclu√≠dos, separados por v√≠rgula.
   * @example "01430000,01452922,01310100"
   */
  "address.zip.in"?: string[];
  /**
   * C√≥digo de endere√ßamento postal maior ou igual ao especificado.
   * @format numeric
   * @minLength 8
   * @maxLength 8
   * @example "01452922"
   */
  "address.zip.gte"?: string;
  /**
   * C√≥digo de endere√ßamento postal menor ou igual ao especificado.
   * @format numeric
   * @minLength 8
   * @maxLength 8
   * @example "01452922"
   */
  "address.zip.lte"?: string;
  /**
   * C√≥digos dos pa√≠ses a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [M49 ü°≠](https://unstats.un.org/unsd/methodology/m49/).
   * @example "32,152,600"
   */
  "address.country.id.in"?: number[];
  /**
   * C√≥digos dos pa√≠ses a serem exclu√≠dos, separados por v√≠rgula, conforme
   * [M49 ü°≠](https://unstats.un.org/unsd/methodology/m49/).
   * @example "32,152,600"
   */
  "address.country.id.nin"?: number[];
  /**
   * Indicador de exist√™ncia de telefone:
   * - `true`: Apenas estabelecimentos com telefone.
   * - `false`: Apenas estabelecimentos sem telefone.
   * @example true
   */
  "phones.ex"?: boolean;
  /**
   * Tipos de telefone a serem inclu√≠dos, separados por v√≠rgula.
   * @example "LANDLINE,MOBILE"
   */
  "phones.type.in"?: ("LANDLINE" | "MOBILE")[];
  /**
   * C√≥digos de DDD a serem inclu√≠dos, separados por v√≠rgula.
   * @example "11,13,15"
   */
  "phones.area.in"?: string[];
  /**
   * C√≥digos de DDD maior ou igual ao especificado.
   * @format numeric
   * @minLength 2
   * @maxLength 2
   * @example "11"
   */
  "phones.area.gte"?: string;
  /**
   * C√≥digos de DDD menor ou igual ao especificado.
   * @format numeric
   * @minLength 2
   * @maxLength 2
   * @example "11"
   */
  "phones.area.lte"?: string;
  /**
   * N√∫meros de telefone a serem inclu√≠dos, separados por v√≠rgula.
   * @example "92635835,44594576,36285962"
   */
  "phones.number.in"?: string[];
  /**
   * N√∫meros de telefone a serem exclu√≠dos, separados por v√≠rgula.
   * @example "92635835,44594576,36285962"
   */
  "phones.number.nin"?: string[];
  /**
   * Indicador de exist√™ncia de e-mail:
   * - `true`: Apenas estabelecimentos com e-mail.
   * - `false`: Apenas estabelecimentos sem e-mail.
   * @example true
   */
  "emails.ex"?: boolean;
  /**
   * Tipos de propriedade de e-mail a serem inclu√≠dos, separados por v√≠rgula.
   * @example "CORPORATE,ACCOUNTING"
   */
  "emails.ownership.in"?: ("ACCOUNTING" | "CORPORATE" | "PERSONAL")[];
  /**
   * Endere√ßos de e-mail a serem inclu√≠dos, separados por v√≠rgula.
   * @example "alex.costa@company.com,jane.doe@gmail.com,support@domain.com"
   */
  "emails.address.in"?: string[];
  /**
   * Endere√ßos de e-mail a serem exclu√≠dos, separados por v√≠rgula.
   * @example "alex.costa@company.com,jane.doe@gmail.com,support@domain.com"
   */
  "emails.address.nin"?: string[];
  /**
   * Dom√≠nios de e-mail a serem inclu√≠dos, separados por v√≠rgula.
   * @example "cnpja.com,bb.com.br,ambev.com.br"
   */
  "emails.domain.in"?: string[];
  /**
   * Dom√≠nios de e-mail a serem exclu√≠dos, separados por v√≠rgula.
   * @example "gmail.com,hotmail.com,yahoo.com"
   */
  "emails.domain.nin"?: string[];
  /**
   * C√≥digos das atividades econ√¥micas principais ou secund√°rias a serem inclu√≠dos, separados por v√≠rgula,
   * conforme [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @example "0111301,1011201,3511501"
   */
  "activities.id.in"?: number[];
  /**
   * C√≥digos das atividades econ√¥micas principais ou secund√°rias a serem exclu√≠dos, separados por v√≠rgula,
   * conforme [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @example "0111301,1011201,3511501"
   */
  "activities.id.nin"?: number[];
  /**
   * C√≥digos das atividades econ√¥micas principais a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @example "0111301,1011201,3511501"
   */
  "mainActivity.id.in"?: number[];
  /**
   * C√≥digos das atividades econ√¥micas principais a serem exclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @example "0111301,1011201,3511501"
   */
  "mainActivity.id.nin"?: number[];
  /**
   * C√≥digos das atividades econ√¥micas secund√°rias a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @example "0111301,1011201,3511501"
   */
  "sideActivities.id.in"?: number[];
  /**
   * C√≥digos das atividades econ√¥micas secund√°rias a serem exclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @example "0111301,1011201,3511501"
   */
  "sideActivities.id.nin"?: number[];
}

/** ListCreateDto */
export interface ListCreateDto {
  /**
   * T√≠tulo da lista.
   * @format not empty
   * @maxLength 50
   * @example "Minha Lista de Empresas"
   */
  title: string;
  /**
   * Descri√ß√£o da lista.
   * @format not empty
   * @maxLength 2000
   * @example "Fornecedores da unidade de Manaus."
   */
  description?: string;
  /**
   * N√∫meros dos CNPJs sem pontua√ß√£o, mutualmente exclusivo com `query`.
   * @maxItems 1000000
   * @minItems 1
   */
  items?: string[];
  /**
   * +**1 ‚Ç™** por 10 registros.
   * Filtros de pesquisa para gerar a lista de estabelecimentos, mutualmente exclusivo com `items`.
   *
   * Os CNPJs ser√£o obtidos na primeira exporta√ß√£o e armazenados de forma est√°tica, n√£o sendo atualizados em execu√ß√µes posteriores.
   */
  query?: ListQueryDto;
  /**
   * Limite de estabelecimentos a serem obtidos ao gerar uma lista atrav√©s de filtros.
   * @format integer
   * @min 1
   * @max 1000000
   * @example 10000
   */
  limit?: number;
}

/** ListDto */
export interface ListDto {
  /**
   * Identificador √∫nico.
   * @format uuid
   * @example "5680a75e-750e-4c31-a1a1-e61e0e4f5618"
   */
  id: string;
  /**
   * Data de cria√ß√£o.
   * @format iso8601
   * @example "2024-03-11T17:30:20.757Z"
   */
  created: string;
  /**
   * Data da √∫ltima atualiza√ß√£o.
   * @format iso8601
   * @example "2024-03-27T08:47:56.384Z"
   */
  updated: string;
  /**
   * T√≠tulo da lista.
   * @format not empty
   * @maxLength 50
   * @example "Minha Lista de Empresas"
   */
  title: string;
  /**
   * Descri√ß√£o da lista.
   * @format not empty
   * @maxLength 2000
   * @example "Fornecedores da unidade de Manaus."
   */
  description?: string;
  /**
   * Quantidade de estabelecimentos.
   * @format integer
   * @example 9264
   */
  size: number;
  /**
   * N√∫meros dos CNPJs sem pontua√ß√£o, mutualmente exclusivo com `query`.
   * @maxItems 1000000
   * @minItems 1
   */
  items?: string[];
  /**
   * +**1 ‚Ç™** por 10 registros.
   * Filtros de pesquisa para gerar a lista de estabelecimentos, mutualmente exclusivo com `items`.
   *
   * Os CNPJs ser√£o obtidos na primeira exporta√ß√£o e armazenados de forma est√°tica, n√£o sendo atualizados em execu√ß√µes posteriores.
   */
  query?: ListQueryDto;
  /**
   * Limite de estabelecimentos a serem obtidos ao gerar uma lista atrav√©s de filtros.
   * @format integer
   * @min 1
   * @max 1000000
   * @example 10000
   */
  limit?: number;
}

/** ListSummaryDto */
export interface ListSummaryDto {
  /**
   * Identificador √∫nico.
   * @format uuid
   * @example "5680a75e-750e-4c31-a1a1-e61e0e4f5618"
   */
  id: string;
  /**
   * Data de cria√ß√£o.
   * @format iso8601
   * @example "2024-03-11T17:30:20.757Z"
   */
  created: string;
  /**
   * Data da √∫ltima atualiza√ß√£o.
   * @format iso8601
   * @example "2024-03-27T08:47:56.384Z"
   */
  updated: string;
  /**
   * T√≠tulo da lista.
   * @format not empty
   * @maxLength 50
   * @example "Minha Lista de Empresas"
   */
  title: string;
  /**
   * Descri√ß√£o da lista.
   * @format not empty
   * @maxLength 2000
   * @example "Fornecedores da unidade de Manaus."
   */
  description?: string;
  /**
   * Quantidade de estabelecimentos.
   * @format integer
   * @example 9264
   */
  size: number;
  /**
   * +**1 ‚Ç™** por 10 registros.
   * Filtros de pesquisa para gerar a lista de estabelecimentos, mutualmente exclusivo com `items`.
   *
   * Os CNPJs ser√£o obtidos na primeira exporta√ß√£o e armazenados de forma est√°tica, n√£o sendo atualizados em execu√ß√µes posteriores.
   */
  query?: ListQueryDto;
  /**
   * Limite de estabelecimentos a serem obtidos ao gerar uma lista atrav√©s de filtros.
   * @format integer
   * @min 1
   * @max 1000000
   * @example 10000
   */
  limit?: number;
}

/** ListPageDto */
export interface ListPageDto {
  /**
   * Token da pr√≥xima p√°gina.
   * @format not empty
   * @minLength 32
   * @maxLength 32
   * @example "8d47bdcbde4a7a2d4a98d5f555a19701"
   */
  next: string;
  /**
   * Quantidade de registros lidos.
   * @format integer
   * @min 1
   * @max 100
   * @example 100
   */
  limit: number;
  /**
   * Quantidade de registros dispon√≠veis.
   * @format integer
   * @min 0
   * @example 345
   */
  count: number;
  /** Listas que obedecem aos crit√©rios de pesquisa. */
  records: ListSummaryDto[];
}

/** ListUpdateDto */
export interface ListUpdateDto {
  /**
   * T√≠tulo da lista.
   * @format not empty
   * @maxLength 50
   * @example "Minha Lista de Empresas"
   */
  title?: string;
  /**
   * Descri√ß√£o da lista.
   * @format not empty
   * @maxLength 2000
   * @example "Fornecedores da unidade de Manaus."
   */
  description?: string;
  /**
   * N√∫meros dos CNPJs sem pontua√ß√£o, mutualmente exclusivo com `query`.
   * @maxItems 1000000
   * @minItems 1
   */
  items?: string[];
  /**
   * +**1 ‚Ç™** por 10 registros.
   * Filtros de pesquisa para gerar a lista de estabelecimentos, mutualmente exclusivo com `items`.
   *
   * Os CNPJs ser√£o obtidos na primeira exporta√ß√£o e armazenados de forma est√°tica, n√£o sendo atualizados em execu√ß√µes posteriores.
   */
  query?: ListQueryDto;
  /**
   * Limite de estabelecimentos a serem obtidos ao gerar uma lista atrav√©s de filtros.
   * @format integer
   * @min 1
   * @max 1000000
   * @example 10000
   */
  limit?: number;
}

/** ListJobOptionsDto */
export interface ListJobOptionsDto {
  /**
   * +**1 ‚Ç™** Adiciona as informa√ß√µes de op√ß√£o pelo
   * Simples e enquadramento no MEI.
   * @default false
   */
  simples?: boolean;
  /**
   * +**1 ‚Ç™** Adiciona o hist√≥rico de per√≠odos
   * anteriores do Simples e MEI.
   * @default false
   */
  simplesHistory?: boolean;
  /**
   * +**1 ‚Ç™** Adiciona as Inscri√ß√µes Estaduais para as selecionadas
   * Unidades Federativas separadas por v√≠rgula, utilize `BR` para considerar todas.
   * @example "PR,RS,SC"
   */
  registrations?: (
    | "BR"
    | "AC"
    | "AL"
    | "AM"
    | "AP"
    | "BA"
    | "CE"
    | "DF"
    | "ES"
    | "GO"
    | "MA"
    | "MG"
    | "MS"
    | "MT"
    | "PA"
    | "PB"
    | "PE"
    | "PI"
    | "PR"
    | "RJ"
    | "RN"
    | "RO"
    | "RR"
    | "RS"
    | "SC"
    | "SP"
    | "SE"
    | "TO"
  )[];
  /**
   * +**1 ‚Ç™** Adiciona a inscri√ß√£o na SUFRAMA.
   * @default false
   */
  suframa?: boolean;
  /**
   * +**1 ‚Ç™** Adiciona a latitude e longitude do endere√ßo.
   * @default false
   */
  geocoding?: boolean;
  /**
   * Estrat√©gia de cache utilizada na aquisi√ß√£o dos dados:
   * - `CACHE`: Entrega os dados do cache, evitando cobran√ßas de cr√©ditos, se os dados n√£o estiverem dispon√≠veis resultar√° em um erro 404.
   * - `CACHE_IF_FRESH`: Retorna os dados do cache respeitando o limite em `maxAge`, se os dados estiverem desatualizados ser√° consultado online.
   * - `CACHE_IF_ERROR`: Idem ao `CACHE_IF_FRESH`, mas se a consulta online falhar retorna os dados do cache respeitando o limite em `maxStale`.
   * - `ONLINE`: Consulta diretamente online, n√£o recomendado pois ignora qualquer cache, sugerimos configurar `maxAge=1` como alternativa.
   * @default "CACHE_IF_ERROR"
   */
  strategy?: "ONLINE" | "CACHE_IF_FRESH" | "CACHE_IF_ERROR" | "CACHE";
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite, relevante para as estrat√©gias `CACHE_IF_FRESH` e `CACHE_IF_ERROR`.
   * @format integer
   * @min 1
   * @max 3650
   * @default 45
   */
  maxAge?: number;
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite em caso de erro na busca online, relevante apenas para a estrat√©gia `CACHE_IF_FRESH`.
   * @format integer
   * @min 1
   * @max 3650
   * @default 365
   */
  maxStale?: number;
}

/** ListExportCreateDto */
export interface ListExportCreateDto {
  /** Op√ß√µes de consulta dos estabelecimentos. */
  options?: ListJobOptionsDto;
}

/** ListExportIdDto */
export interface ListExportIdDto {
  /**
   * C√≥digo da exporta√ß√£o.
   * @format uuid
   * @example "db344b70-3daf-43f3-b324-0f204ebfbd99"
   */
  id: string;
}

/** ListLinkDto */
export interface ListLinkDto {
  /**
   * Tipo de arquivo a qual o link se refere.
   * @example "EXCEL"
   */
  type: "EXCEL" | "JSON_ZIP";
  /**
   * URL p√∫blica de acesso ao arquivo.
   * @format not empty
   * @example "https://storage.googleapis.com/cnpja/list/.../lista.xlsx"
   */
  url: string;
}

/** ListExportDto */
export interface ListExportDto {
  /**
   * Date of last update
   * @format iso8601
   * @example "2024-03-11T17:30:20.757Z"
   */
  updated: string;
  /**
   * Date of creation
   * @format iso8601
   * @example "2024-03-11T17:30:20.757Z"
   */
  created: string;
  /**
   * Unique identifier
   * @format uuid
   * @example "5680a75e-750e-4c31-a1a1-e61e0e4f5618"
   */
  id: string;
  /**
   * Situa√ß√£o da exporta√ß√£o:
   * - `PENDING`: Exporta√ß√£o aguardando na fila, √© permitido processar uma lista por vez.
   * - `PROCESSING`: Processamento dos dados empresariais em andamento.
   * - `PROCESSED`: Dados processados, aguardando exporta√ß√£o dos arquivos.
   * - `EXPORTING`: Exporta√ß√£o dos arquivos em andamento.
   * - `COMPLETED`: Exporta√ß√£o conclu√≠da com sucesso.
   * - `FAILED`: Exporta√ß√£o falhou, confira detalhes no campo `statusReason`.
   * @example "COMPLETED"
   */
  status: "PENDING" | "PROCESSING" | "PROCESSED" | "EXPORTING" | "COMPLETED" | "FAILED";
  /**
   * Motivo de falha da exporta√ß√£o.
   * @format not empty
   * @example "Saldo insuficiente"
   */
  statusReason: string;
  /**
   * Percentual de conclus√£o da exporta√ß√£o.
   * @format float
   * @example 0.5
   */
  progress: number;
  /** Op√ß√µes de consulta dos estabelecimentos. */
  options: ListJobOptionsDto;
  /** Lista de links para arquivos. */
  links: ListLinkDto[];
}

/** ListExportPageDto */
export interface ListExportPageDto {
  /**
   * Token da pr√≥xima p√°gina.
   * @format not empty
   * @minLength 32
   * @maxLength 32
   * @example "8d47bdcbde4a7a2d4a98d5f555a19701"
   */
  next: string;
  /**
   * Quantidade de registros lidos.
   * @format integer
   * @min 1
   * @max 100
   * @example 100
   */
  limit: number;
  /**
   * Quantidade de registros dispon√≠veis.
   * @format integer
   * @min 0
   * @example 345
   */
  count: number;
  /** Exporta√ß√µes pertencentes a lista. */
  records: ListExportDto[];
}

/** LegacyRegistrationDto */
export interface LegacyRegistrationDto {
  /**
   * Situa√ß√£o cadastral: `NULA`, `ATIVA`, `SUSPENSA`, `INAPTA` ou `BAIXADA`.
   * @example "ATIVA"
   */
  status: "NULA" | "ATIVA" | "SUSPENSA" | "INAPTA" | "BAIXADA";
  /**
   * Data da situa√ß√£o especial.
   * @format iso8601
   * @example "2022-01-01"
   */
  status_date: string;
  /**
   * Motivo da situa√ß√£o cadastral.
   * @format not empty
   * @example "Extin√ß√£o Por Encerramento Liquida√ß√£o Volunt√°ria"
   */
  status_reason: string;
  /**
   * Descri√ß√£o da situa√ß√£o especial.
   * @format not empty
   * @example "In√≠cio de Liquida√ß√£o Judicial"
   */
  special_status: string;
  /**
   * Data da situa√ß√£o especial.
   * @format iso8601
   * @example "2022-01-01"
   */
  special_status_date: string;
}

/** LegacyAddressDto */
export interface LegacyAddressDto {
  /**
   * Logradouro.
   * @format not empty
   * @example "Avenida Brigadeiro Faria Lima"
   */
  street: string;
  /**
   * N√∫mero.
   * @format not empty
   * @example "2369"
   */
  number: string;
  /**
   * Complemento.
   * @format not empty
   * @example "Conj 1102"
   */
  details: string;
  /**
   * Bairro ou distrito.
   * @format not empty
   * @example "Jardim Paulistano"
   */
  neighborhood: string;
  /**
   * Munic√≠pio.
   * @format not empty
   * @example "S√£o Paulo"
   */
  city: string;
  /**
   * @format numeric
   * @example "3550308"
   */
  city_ibge: string;
  /**
   * Sigla da Unidade Federativa.
   * @example "SP"
   */
  state:
    | "AC"
    | "AL"
    | "AM"
    | "AP"
    | "BA"
    | "CE"
    | "DF"
    | "ES"
    | "GO"
    | "MA"
    | "MG"
    | "MS"
    | "MT"
    | "PA"
    | "PB"
    | "PE"
    | "PI"
    | "PR"
    | "RJ"
    | "RN"
    | "RO"
    | "RR"
    | "RS"
    | "SC"
    | "SP"
    | "SE"
    | "TO";
  /**
   * C√≥digo da Unidade Federativa conforme IBGE.
   * @format numeric
   * @example "35"
   */
  state_ibge: string;
  /**
   * C√≥digo de Endere√ßamento Postal.
   * @format numeric
   * @minLength 8
   * @maxLength 8
   * @example "01452922"
   */
  zip: string;
}

/** LegacyLegalNatureDto */
export interface LegacyLegalNatureDto {
  /**
   * @format numeric
   * @example "2062"
   */
  code: string;
  /**
   * Descri√ß√£o da natureza jur√≠dica.
   * @format not empty
   * @example "Sociedade Empres√°ria Limitada"
   */
  description: string;
}

/** LegacySimplesNacionalDto */
export interface LegacySimplesNacionalDto {
  /**
   * Data da √∫ltima atualiza√ß√£o do Simples Nacional.
   * @format iso8601
   * @example "2024-06-05T17:52:39.136Z"
   */
  last_update: string;
  /**
   * Indica se optante pelo Simples Nacional.
   * @example true
   */
  simples_optant: boolean;
  /**
   * Data de inclus√£o no per√≠odo vigente.
   * @format iso8601
   * @example "2020-06-05"
   */
  simples_included: string;
  /**
   * [Removido] Data de encerramento do √∫ltimo per√≠odo.
   * @format iso8601
   * @example "2021-06-05"
   */
  simples_excluded: string;
  /**
   * Indica se enquadrado no MEI.
   * @example true
   */
  simei_optant: boolean;
}

/** LegacySintegraRegistrationDto */
export interface LegacySintegraRegistrationDto {
  /**
   * N√∫mero da Inscri√ß√£o Estadual.
   * @format numeric
   * @example "0962101427"
   */
  number: string;
  /**
   * Unidade Federativa de registro.
   * @example "RS"
   */
  state:
    | "AC"
    | "AL"
    | "AM"
    | "AP"
    | "BA"
    | "CE"
    | "DF"
    | "ES"
    | "GO"
    | "MA"
    | "MG"
    | "MS"
    | "MT"
    | "PA"
    | "PB"
    | "PE"
    | "PI"
    | "PR"
    | "RJ"
    | "RN"
    | "RO"
    | "RR"
    | "RS"
    | "SC"
    | "SP"
    | "SE"
    | "TO";
  /**
   * Indica se habilitada como contribuinte.
   * @example true
   */
  enabled: boolean;
}

/** LegacySintegraDto */
export interface LegacySintegraDto {
  /**
   * Data da √∫ltima atualiza√ß√£o do Cadastro de Contribuintes.
   * @format iso8601
   * @example "2024-06-05T17:52:39.136Z"
   */
  last_update: string;
  /**
   * N√∫mero da Inscri√ß√£o Estadual no estado de origem.
   * @format numeric
   * @example "0962101427"
   */
  home_state_registration: string;
  /** Lista de Inscri√ß√µes Estaduais. */
  registrations: LegacySintegraRegistrationDto[];
}

/** LegacyActivityDto */
export interface LegacyActivityDto {
  /**
   * @format numeric
   * @example "6311900"
   */
  code: string;
  /**
   * Descri√ß√£o da atividade econ√¥mica.
   * @format not empty
   * @example "Tratamento de dados, provedores de servi√ßos de aplica√ß√£o e servi√ßos de hospedagem na internet"
   */
  description: string;
}

/** LegacyRoleDto */
export interface LegacyRoleDto {
  /**
   * @format numeric
   * @example "49"
   */
  code: string;
  /**
   * Descri√ß√£o da qualifica√ß√£o.
   * @format not empty
   * @example "S√≥cio-Administrador"
   */
  description: string;
}

/** LegacyMemberAgentDto */
export interface LegacyMemberAgentDto {
  /**
   * Nome ou raz√£o social.
   * @format not empty
   * @example "Jo√£o Silva"
   */
  name: string;
  /**
   * CPF ou CNPJ.
   * @format not empty
   * @example "***123456**"
   */
  tax_id: string;
  /**
   * Nome do pa√≠s de origem.
   * @format not empty
   * @example "BRASIL"
   */
  home_country: string;
  /** Informa√ß√µes da qualifica√ß√£o. */
  role: LegacyRoleDto;
}

/** LegacyMemberDto */
export interface LegacyMemberDto {
  /**
   * Nome ou raz√£o social.
   * @format not empty
   * @example "Jo√£o Silva"
   */
  name: string;
  /**
   * CPF ou CNPJ.
   * @format not empty
   * @example "***123456**"
   */
  tax_id: string;
  /**
   * Nome do pa√≠s de origem.
   * @format not empty
   * @example "BRASIL"
   */
  home_country: string;
  /** Informa√ß√µes da qualifica√ß√£o. */
  role: LegacyRoleDto;
  /**
   * Presente quando aplic√°vel na qualifica√ß√£o
   * Informa√ß√µes do representante legal.
   */
  legal_rep: LegacyMemberAgentDto;
}

/** LegacyFilesDto */
export interface LegacyFilesDto {
  /**
   * Comprovante de inscri√ß√£o em PDF.
   * @format url
   * @example "https://api.cnpja.com/[...]"
   */
  registration: string;
  /**
   * Quadro de s√≥cios e administradores em PDF.
   * @format url
   * @example "https://api.cnpja.com/[...]"
   */
  membership: string;
}

/** LegacyMapsDto */
export interface LegacyMapsDto {
  /**
   * Mapa a√©reo de vias.
   * @format url
   * @example "https://api.cnpja.com/[...]"
   */
  roads: string;
  /**
   * Mapa a√©reo de sat√©lite.
   * @format url
   * @example "https://api.cnpja.com/[...]"
   */
  satellite: string;
  /**
   * Vis√£o da rua.
   * @format url
   * @example "https://api.cnpja.com/[...]"
   */
  street: string;
}

/** LegacyCompanyDto */
export interface LegacyCompanyDto {
  /**
   * Data da √∫ltima atualiza√ß√£o.
   * @format iso8601
   * @example "2024-06-05T17:52:39.136Z"
   */
  last_update: string;
  /**
   * Raz√£o social.
   * @format not empty
   * @example "CNPJA TECNOLOGIA LTDA"
   */
  name: string;
  /**
   * Nome fantasia.
   * @format not empty
   * @example "CNPJA"
   */
  alias: string;
  /**
   * N√∫mero do CNPJ.
   * @format cnpj
   * @example "37335118000180"
   */
  tax_id: string;
  /**
   * Tipo do estabelecimento: `MATRIZ` ou `FILIAL`.
   * @example "MATRIZ"
   */
  type: "MATRIZ" | "FILIAL";
  /**
   * Data de abertura.
   * @format iso8601
   * @example "2020-06-05"
   */
  founded: string;
  /**
   * Porte da empresa: `ME`, `EPP` ou `DEMAIS`.
   * @example "ME"
   */
  size: "ME" | "EPP" | "DEMAIS";
  /**
   * Capital social.
   * @format float
   * @example 1000
   */
  capital: number;
  /**
   * Endere√ßo de e-mail.
   * @format e-mail
   * @example "contato@cnpja.com"
   */
  email: string;
  /**
   * N√∫mero do telefone.
   * @format numeric
   * @example "11971564144"
   */
  phone: string;
  /**
   * N√∫mero do telefone alternativo.
   * @format numeric
   * @example "11971564144"
   */
  phone_alt: string;
  /**
   * Ente federativo respons√°vel.
   * @format not empty
   * @example "Uniao"
   */
  federal_entity: string;
  /** Informa√ß√µes da situa√ß√£o cadastral. */
  registration: LegacyRegistrationDto;
  /** Informa√ß√µes da situa√ß√£o cadastral. */
  address: LegacyAddressDto;
  /** Informa√ß√µes da natureza jur√≠dica. */
  legal_nature: LegacyLegalNatureDto;
  /** Informa√ß√µes do Simples Nacional. */
  simples_nacional: LegacySimplesNacionalDto;
  /** Informa√ß√µes do Cadastro de Contribuintes. */
  sintegra: LegacySintegraDto;
  /** Informa√ß√µes da atividade econ√¥mica principal. */
  primary_activity: LegacyActivityDto;
  /** Lista de atividades econ√¥micas secund√°rias. */
  secondary_activities: LegacyActivityDto[];
  /** Quadro de s√≥cios e administradores. */
  membership: LegacyMemberDto[];
  partnership: object;
  /** Links para download de arquivos. */
  files: LegacyFilesDto;
  /** Links para download de mapas. */
  maps: LegacyMapsDto;
}

/** CreditoDto */
export interface CreditoDto {
  /**
   * Cr√©ditos acumulados de meses anteriores.
   * @format integer
   * @example 2000
   */
  perpetual: number;
  /**
   * Cr√©ditos do m√™s atual.
   * @format integer
   * @example 10000
   */
  transient: number;
}

/** CompanyOfficeDto */
export interface CompanyOfficeDto {
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * Nome fantasia.
   * @format not empty
   * @example "CNPJA"
   */
  alias: string;
  /**
   * Data de abertura.
   * @format iso8601
   * @example "2020-06-05"
   */
  founded: string;
  /**
   * Indica se o estabelecimento √© a Matriz.
   * @example true
   */
  head: boolean;
  /**
   * Data da situa√ß√£o cadastral.
   * @format iso8601
   * @example "2020-06-05"
   */
  statusDate: string;
  /** Informa√ß√µes da situa√ß√£o cadastral. */
  status: OfficeStatusDto;
  /** Informa√ß√µes do motivo da situa√ß√£o cadastral, presente quando `status.id != 2`. */
  reason?: OfficeReasonDto;
  /**
   * Data da situa√ß√£o especial.
   * @format iso8601
   * @example "2022-01-01"
   */
  specialDate?: string;
  /** Informa√ß√µes da situa√ß√£o especial, presente quando `specialDate != undefined`. */
  special?: OfficeSpecialDto;
  /** Informa√ß√µes da atividade econ√¥mica principal. */
  mainActivity: ActivityDto;
}

/** CompanyDto */
export interface CompanyDto {
  /**
   * C√≥digo da empresa, idem aos oito primeiros caracteres do CNPJ.
   * @format integer
   * @example 37335118
   */
  id: number;
  /**
   * Raz√£o social.
   * @format not empty
   * @example "CNPJA TECNOLOGIA LTDA"
   */
  name: string;
  /**
   * Ente federativo respons√°vel, presente quando `nature.id < 2000`.
   * @format not empty
   * @example "Uniao"
   */
  jurisdiction?: string;
  /**
   * Capital social
   * @format float
   * @example 1000
   */
  equity: number;
  /** Informa√ß√µes da natureza jur√≠dica. */
  nature: NatureDto;
  /** Informa√ß√µes do porte. */
  size: CompanySizeDto;
  /** Informa√ß√µes da op√ß√£o pelo Simples Nacional. */
  simples?: SimplesSimeiDto;
  /** Informa√ß√µes do enquadramento no MEI. */
  simei?: SimplesSimeiDto;
  /** Quadro de s√≥cios e administradores. */
  members: MemberDto[];
  /** Lista de estabelecimentos. */
  offices: CompanyOfficeDto[];
}

/** CccDto */
export interface CccDto {
  /**
   * N√∫mero do CNPJ ou CPF sem pontua√ß√£o.
   * @format cnpj|cpf
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * Data da √∫ltima atualiza√ß√£o.
   * @format iso8601
   * @example "2024-06-05T17:52:39.136Z"
   */
  updated: string;
  /**
   * Unidade Federativa de origem.
   * @example "PR"
   */
  originState:
    | "AC"
    | "AL"
    | "AM"
    | "AP"
    | "BA"
    | "CE"
    | "DF"
    | "ES"
    | "GO"
    | "MA"
    | "MG"
    | "MS"
    | "MT"
    | "PA"
    | "PB"
    | "PE"
    | "PI"
    | "PR"
    | "RJ"
    | "RN"
    | "RO"
    | "RR"
    | "RS"
    | "SC"
    | "SP"
    | "SE"
    | "TO";
  /** Inscri√ß√µes Estaduais. */
  registrations: RegistrationDto[];
}

export interface SuframaReadDto {
  /**
   * N√∫mero do CNPJ ou CPF sem pontua√ß√£o.
   * @format cnpj|cpf
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * Estrat√©gia de cache utilizada na aquisi√ß√£o dos dados:
   * - `CACHE`: Entrega os dados do cache, evitando cobran√ßas de cr√©ditos, se os dados n√£o estiverem dispon√≠veis resultar√° em um erro 404.
   * - `CACHE_IF_FRESH`: Retorna os dados do cache respeitando o limite em `maxAge`, se os dados estiverem desatualizados ser√° consultado online.
   * - `CACHE_IF_ERROR`: Idem ao `CACHE_IF_FRESH`, mas se a consulta online falhar retorna os dados do cache respeitando o limite em `maxStale`.
   * - `ONLINE`: Consulta diretamente online, n√£o recomendado pois ignora qualquer cache, sugerimos configurar `maxAge=1` como alternativa.
   * @default "CACHE_IF_ERROR"
   */
  strategy?: "ONLINE" | "CACHE_IF_FRESH" | "CACHE_IF_ERROR" | "CACHE";
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite, relevante para as estrat√©gias `CACHE_IF_FRESH` e `CACHE_IF_ERROR`.
   * @format integer
   * @min 1
   * @max 3650
   * @default 45
   */
  maxAge?: number;
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite em caso de erro na busca online, relevante apenas para a estrat√©gia `CACHE_IF_FRESH`.
   * @format integer
   * @min 1
   * @max 3650
   * @default 365
   */
  maxStale?: number;
  /** Aguarda a compensa√ß√£o dos cr√©ditos de forma s√≠ncrona, retornando o cabe√ßalho `cnpja-request-cost`. */
  sync?: boolean;
}

export interface SuframaCertificateDto {
  /**
   * N√∫mero do CNPJ ou CPF sem pontua√ß√£o.
   * @format cnpj|cpf
   * @example "37335118000180"
   */
  taxId: string;
}

export interface SimplesReadDto {
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * +**1 ‚Ç™** Adiciona o hist√≥rico de per√≠odos
   * anteriores do Simples e MEI.
   * @default false
   */
  history?: boolean;
  /**
   * Estrat√©gia de cache utilizada na aquisi√ß√£o dos dados:
   * - `CACHE`: Entrega os dados do cache, evitando cobran√ßas de cr√©ditos, se os dados n√£o estiverem dispon√≠veis resultar√° em um erro 404.
   * - `CACHE_IF_FRESH`: Retorna os dados do cache respeitando o limite em `maxAge`, se os dados estiverem desatualizados ser√° consultado online.
   * - `CACHE_IF_ERROR`: Idem ao `CACHE_IF_FRESH`, mas se a consulta online falhar retorna os dados do cache respeitando o limite em `maxStale`.
   * - `ONLINE`: Consulta diretamente online, n√£o recomendado pois ignora qualquer cache, sugerimos configurar `maxAge=1` como alternativa.
   * @default "CACHE_IF_ERROR"
   */
  strategy?: "ONLINE" | "CACHE_IF_FRESH" | "CACHE_IF_ERROR" | "CACHE";
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite, relevante para as estrat√©gias `CACHE_IF_FRESH` e `CACHE_IF_ERROR`.
   * @format integer
   * @min 1
   * @max 3650
   * @default 45
   */
  maxAge?: number;
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite em caso de erro na busca online, relevante apenas para a estrat√©gia `CACHE_IF_FRESH`.
   * @format integer
   * @min 1
   * @max 3650
   * @default 365
   */
  maxStale?: number;
  /** Aguarda a compensa√ß√£o dos cr√©ditos de forma s√≠ncrona, retornando o cabe√ßalho `cnpja-request-cost`. */
  sync?: boolean;
}

export interface SimplesCertificateDto {
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
}

export interface RfbReadDto {
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * Estrat√©gia de cache utilizada na aquisi√ß√£o dos dados:
   * - `CACHE`: Entrega os dados do cache, evitando cobran√ßas de cr√©ditos, se os dados n√£o estiverem dispon√≠veis resultar√° em um erro 404.
   * - `CACHE_IF_FRESH`: Retorna os dados do cache respeitando o limite em `maxAge`, se os dados estiverem desatualizados ser√° consultado online.
   * - `CACHE_IF_ERROR`: Idem ao `CACHE_IF_FRESH`, mas se a consulta online falhar retorna os dados do cache respeitando o limite em `maxStale`.
   * - `ONLINE`: Consulta diretamente online, n√£o recomendado pois ignora qualquer cache, sugerimos configurar `maxAge=1` como alternativa.
   * @default "CACHE_IF_ERROR"
   */
  strategy?: "ONLINE" | "CACHE_IF_FRESH" | "CACHE_IF_ERROR" | "CACHE";
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite, relevante para as estrat√©gias `CACHE_IF_FRESH` e `CACHE_IF_ERROR`.
   * @format integer
   * @min 1
   * @max 3650
   * @default 45
   */
  maxAge?: number;
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite em caso de erro na busca online, relevante apenas para a estrat√©gia `CACHE_IF_FRESH`.
   * @format integer
   * @min 1
   * @max 3650
   * @default 365
   */
  maxStale?: number;
  /** Aguarda a compensa√ß√£o dos cr√©ditos de forma s√≠ncrona, retornando o cabe√ßalho `cnpja-request-cost`. */
  sync?: boolean;
}

export interface RfbCertificateDto {
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * P√°ginas a incluir no comprovante separadas por v√≠rgula.
   * @default "REGISTRATION,MEMBERS"
   */
  pages?: ("REGISTRATION" | "MEMBERS")[];
}

export interface PersonSearchDto {
  /**
   * Token de pagina√ß√£o, mutualmente exclusivo com as demais propriedades.
   * @format not empty
   * @minLength 32
   * @maxLength 32
   * @example "8d47bdcbde4a7a2d4a98d5f555a19701"
   */
  token?: string;
  /**
   * Quantidade de registros a serem lidos por p√°gina.
   * @format integer
   * @min 1
   * @max 1000
   * @default 10
   */
  limit?: number;
  /**
   * Tipos das pessoas serem inclu√≠dos, separados por v√≠rgula:
   * - `NATURAL`: Pessoa f√≠sica.
   * - `LEGAL`: Pessoa jur√≠dica.
   * - `FOREIGN`: Pessoa residente no exterior.
   * - `UNKNOWN`: Pessoa desconhecida.
   * @example "NATURAL,LEGAL"
   */
  "type.in"?: ("LEGAL" | "NATURAL" | "FOREIGN" | "UNKNOWN")[];
  /**
   * Nomes a serem inclu√≠dos, separados por espa√ßo para correspond√™ncia na mesma pessoa,
   * ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Maria Oliveira,Ana Martins,Jo√£o"
   */
  "name.in"?: string[];
  /**
   * Nomes a serem exclu√≠dos, separados por espa√ßo para correspond√™ncia na mesma pessoa,
   * ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Maria Oliveira,Ana Martins,Jo√£o"
   */
  "name.nin"?: string[];
  /**
   * CPFs ou CNPJs a serem inclu√≠dos, separados por v√≠rgula. A correspond√™ncia por CPF ser√° feita pelos
   * d√≠gitos entre o quarto e nono, uma vez que n√£o armazenamos CPFs completos em nossa plataforma.
   * @example "78326957062,92854908082,07526557000100"
   */
  "taxId.in"?: string[];
  /**
   * Faixas et√°rias a serem inclu√≠das, separadas por v√≠rgula.
   * @example "21-30,31-40"
   */
  "age.in"?: ("0-12" | "13-20" | "21-30" | "31-40" | "41-50" | "51-60" | "61-70" | "71-80" | "81+")[];
  /**
   * C√≥digos dos pa√≠ses a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [M49 ü°≠](https://unstats.un.org/unsd/methodology/m49/).
   * @example "32,152,600"
   */
  "country.id.in"?: number[];
  /**
   * C√≥digos dos pa√≠ses a serem exclu√≠dos, separados por v√≠rgula, conforme
   * [M49 ü°≠](https://unstats.un.org/unsd/methodology/m49/).
   * @example "32,152,600"
   */
  "country.id.nin"?: number[];
}

export interface OfficeReadDto {
  /**
   * +**1 ‚Ç™** Adiciona as informa√ß√µes de op√ß√£o pelo
   * Simples e enquadramento no MEI.
   * @default false
   */
  simples?: boolean;
  /**
   * +**1 ‚Ç™** Adiciona o hist√≥rico de per√≠odos
   * anteriores do Simples e MEI.
   * @default false
   */
  simplesHistory?: boolean;
  /**
   * +**1 ‚Ç™** Adiciona as Inscri√ß√µes Estaduais para as selecionadas
   * Unidades Federativas separadas por v√≠rgula, utilize `BR` para considerar todas.
   * @example "PR,RS,SC"
   */
  registrations?: (
    | "BR"
    | "AC"
    | "AL"
    | "AM"
    | "AP"
    | "BA"
    | "CE"
    | "DF"
    | "ES"
    | "GO"
    | "MA"
    | "MG"
    | "MS"
    | "MT"
    | "PA"
    | "PB"
    | "PE"
    | "PI"
    | "PR"
    | "RJ"
    | "RN"
    | "RO"
    | "RR"
    | "RS"
    | "SC"
    | "SP"
    | "SE"
    | "TO"
  )[];
  /**
   * +**1 ‚Ç™** Adiciona a inscri√ß√£o na SUFRAMA.
   * @default false
   */
  suframa?: boolean;
  /**
   * +**1 ‚Ç™** Adiciona a latitude e longitude do endere√ßo.
   * @default false
   */
  geocoding?: boolean;
  /**
   * Adiciona links p√∫blicos para visualiza√ß√£o dos arquivos selecionados separados por v√≠rgula.
   * @example "RFB_CERTIFICATE,SIMPLES_CERTIFICATE"
   */
  links?: (
    | "RFB_CERTIFICATE"
    | "SIMPLES_CERTIFICATE"
    | "CCC_CERTIFICATE"
    | "SUFRAMA_CERTIFICATE"
    | "OFFICE_MAP"
    | "OFFICE_STREET"
  )[];
  /**
   * Estrat√©gia de cache utilizada na aquisi√ß√£o dos dados:
   * - `CACHE`: Entrega os dados do cache, evitando cobran√ßas de cr√©ditos, se os dados n√£o estiverem dispon√≠veis resultar√° em um erro 404.
   * - `CACHE_IF_FRESH`: Retorna os dados do cache respeitando o limite em `maxAge`, se os dados estiverem desatualizados ser√° consultado online.
   * - `CACHE_IF_ERROR`: Idem ao `CACHE_IF_FRESH`, mas se a consulta online falhar retorna os dados do cache respeitando o limite em `maxStale`.
   * - `ONLINE`: Consulta diretamente online, n√£o recomendado pois ignora qualquer cache, sugerimos configurar `maxAge=1` como alternativa.
   * @default "CACHE_IF_ERROR"
   */
  strategy?: "ONLINE" | "CACHE_IF_FRESH" | "CACHE_IF_ERROR" | "CACHE";
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite, relevante para as estrat√©gias `CACHE_IF_FRESH` e `CACHE_IF_ERROR`.
   * @format integer
   * @min 1
   * @max 3650
   * @default 45
   */
  maxAge?: number;
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite em caso de erro na busca online, relevante apenas para a estrat√©gia `CACHE_IF_FRESH`.
   * @format integer
   * @min 1
   * @max 3650
   * @default 365
   */
  maxStale?: number;
  /** Aguarda a compensa√ß√£o dos cr√©ditos de forma s√≠ncrona, retornando o cabe√ßalho `cnpja-request-cost`. */
  sync?: boolean;
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
}

export interface OfficeSearchDto {
  /**
   * Token de pagina√ß√£o, mutualmente exclusivo com as demais propriedades.
   * @format not empty
   * @minLength 32
   * @maxLength 32
   * @example "8d47bdcbde4a7a2d4a98d5f555a19701"
   */
  token?: string;
  /**
   * Quantidade de registros a serem lidos por p√°gina.
   * @format integer
   * @min 1
   * @max 1000
   * @default 10
   */
  limit?: number;
  /**
   * Termos a serem inclu√≠dos na raz√£o social ou nome fantasia, separados por espa√ßo para correspond√™ncia
   * no mesmo estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "CNPJ√°,Banco do Brasil,AMBEV S/A"
   */
  "names.in"?: string[];
  /**
   * Termos a serem exclu√≠dos na raz√£o social ou nome fantasia, separados por espa√ßo para correspond√™ncia
   * no mesmo estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "EI,Eireli,LTDA"
   */
  "names.nin"?: string[];
  /**
   * Termos a serem inclu√≠dos na raz√£o social, separados por espa√ßo para correspond√™ncia na mesma empresa,
   * ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "CNPJ√°,Banco do Brasil,AMBEV S/A"
   */
  "company.name.in"?: string[];
  /**
   * Termos a serem exclu√≠dos na raz√£o social, separados por espa√ßo para correspond√™ncia na mesma empresa,
   * ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "EI,Eireli,LTDA"
   */
  "company.name.nin"?: string[];
  /**
   * Capital social maior ou igual ao valor especificado.
   * @format float
   * @min 0
   * @example 12345.67
   */
  "company.equity.gte"?: number;
  /**
   * Capital social menor ou igual ao valor especificado.
   * @format float
   * @min 0
   * @example 98765.43
   */
  "company.equity.lte"?: number;
  /**
   * C√≥digos das naturezas jur√≠dicas a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/estrutura/natjur-estrutura/natureza-juridica-2021).
   * @example "1015,2011,3034"
   */
  "company.nature.id.in"?: number[];
  /**
   * C√≥digos das naturezas jur√≠dicas a serem exclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/estrutura/natjur-estrutura/natureza-juridica-2021).
   * @example "1015,2011,3034"
   */
  "company.nature.id.nin"?: number[];
  /**
   * C√≥digos dos portes a serem inclu√≠dos, separados por v√≠rgula:
   * - `1`: Microempresa (ME).
   * - `3`: Empresa de Pequeno Porte (EPP).
   * - `5`: Demais.
   * @example "1,3"
   */
  "company.size.id.in"?: number[];
  /**
   * Indicador de op√ß√£o pelo Simples Nacional:
   * - `true`: Apenas empresas optantes.
   * - `false`: Apenas empresas n√£o optantes.
   * @example true
   */
  "company.simples.optant.eq"?: boolean;
  /**
   * Data de op√ß√£o pelo Simples Nacional maior ou igual a especificada.
   * @format iso8601
   * @example "2018-01-01"
   */
  "company.simples.since.gte"?: string;
  /**
   * Data de op√ß√£o pelo Simples Nacional menor ou igual a especificada.
   * @format iso8601
   * @example "2020-12-31"
   */
  "company.simples.since.lte"?: string;
  /**
   * Indicador de enquadramento no MEI:
   * - `true`: Apenas empresas enquadradas.
   * - `false`: Apenas empresas n√£o enquadradas.
   * @example true
   */
  "company.simei.optant.eq"?: boolean;
  /**
   * Data de enquadramento no MEI maior ou igual a especificada.
   * @format iso8601
   * @example "2018-01-01"
   */
  "company.simei.since.gte"?: string;
  /**
   * Data de enquadramento no MEI menor ou igual a especificada.
   * @format iso8601
   * @example "2020-12-31"
   */
  "company.simei.since.lte"?: string;
  /**
   * Identificadores de listas de CNPJs a serem exclu√≠dos, separados por v√≠rgula.
   * @example "37505509-b2a5-42c2-94f4-aa99d2033bf5"
   */
  "taxId.nin"?: string[];
  /**
   * Termos a serem inclu√≠dos no nome fantasia, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "CNPJ√°,Banco do Brasil,AMBEV S/A"
   */
  "alias.in"?: string[];
  /**
   * Termos a serem exclu√≠dos no nome fantasia, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Eireli,LTDA"
   */
  "alias.nin"?: string[];
  /**
   * Data de abertura maior ou igual a especificada.
   * @format iso8601
   * @example "2018-01-01"
   */
  "founded.gte"?: string;
  /**
   * Data de abertura menor ou igual a especificada.
   * @format iso8601
   * @example "2020-12-31"
   */
  "founded.lte"?: string;
  /**
   * Indicador de estabelecimento matriz:
   * - `true`: Apenas matrizes.
   * - `false`: Apenas filiais.
   * @example true
   */
  "head.eq"?: boolean;
  /**
   * Data da situa√ß√£o cadastral maior ou igual a especificada.
   * @format iso8601
   * @example "2018-01-01"
   */
  "statusDate.gte"?: string;
  /**
   * Data da situa√ß√£o cadastral menor ou igual a especificada.
   * @format iso8601
   * @example "2020-12-31"
   */
  "statusDate.lte"?: string;
  /**
   * C√≥digos das situa√ß√µes cadastrais a serem inclu√≠dos, separados por v√≠rgula:
   * - `1`: Nula.
   * - `2`: Ativa.
   * - `3`: Suspensa.
   * - `4`: Inapta.
   * - `8`: Baixada.
   * @example "3,4,8"
   */
  "status.id.in"?: number[];
  /**
   * C√≥digos dos motivos das situa√ß√µes cadastrais a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [Receita Federal ü°≠](http://www.consultas.cge.rj.gov.br/scadastral.pdf).
   * @example "1,3,5"
   */
  "reason.id.in"?: number[];
  /**
   * Data da situa√ß√£o especial maior ou igual a especificada.
   * @format iso8601
   * @example "2018-01-01"
   */
  "specialDate.gte"?: string;
  /**
   * Data da situa√ß√£o especial menor ou igual a especificada.
   * @format iso8601
   * @example "2020-12-31"
   */
  "specialDate.lte"?: string;
  /**
   * C√≥digos das situa√ß√µes especiais a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [Receita Federal ü°≠](http://www38.receita.fazenda.gov.br/cadsincnac/jsp/coleta/ajuda/topicos/Eventos_de_Alteracao.htm).
   * @example "405,410,417"
   */
  "special.id.in"?: number[];
  /**
   * C√≥digos dos munic√≠pios a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://www.ibge.gov.br/explica/codigos-dos-municipios.php).
   * @example "4106902,4205407,4314902"
   */
  "address.municipality.in"?: number[];
  /**
   * C√≥digos dos munic√≠pios a serem exclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://www.ibge.gov.br/explica/codigos-dos-municipios.php).
   * @example "4106902,4205407,4314902"
   */
  "address.municipality.nin"?: number[];
  /**
   * Termos a serem inclu√≠dos no logradouro, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Avenida Copacabana,Rua das Pedras,Rua Oscar Freire"
   */
  "address.street.in"?: string[];
  /**
   * Termos a serem exclu√≠dos no logradouro, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Avenida Copacabana,Rua das Pedras,Rua Oscar Freire"
   */
  "address.street.nin"?: string[];
  /**
   * N√∫meros do logradouro a serem inclu√≠dos, separados por v√≠rgula.
   * @example "10,435,10387"
   */
  "address.number.in"?: string[];
  /**
   * N√∫meros do logradouro a serem exclu√≠dos, separados por v√≠rgula.
   * @example "10,435,10387"
   */
  "address.number.nin"?: string[];
  /**
   * Termos a serem inclu√≠dos no complemento, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Cj 1403,Andar 4,Bloco C"
   */
  "address.details.in"?: string[];
  /**
   * Termos a serem exclu√≠dos no complemento, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Cj 1403,Andar 4,Bloco C"
   */
  "address.details.nin"?: string[];
  /**
   * Termos a serem inclu√≠dos no bairro, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Leblon,Vila Ol√≠mpia,Belvedere"
   */
  "address.district.in"?: string[];
  /**
   * Termos a serem exclu√≠dos no bairro, separados por espa√ßo para correspond√™ncia no mesmo
   * estabelecimento, ou separados por v√≠rgula para correspond√™ncia em diferentes.
   * @example "Leblon,Vila Ol√≠mpia,Belvedere"
   */
  "address.district.nin"?: string[];
  /**
   * Unidades federativas a serem inclu√≠das, separadas por v√≠rgula.
   * @example "ES,RJ,SP"
   */
  "address.state.in"?: (
    | "AC"
    | "AL"
    | "AM"
    | "AP"
    | "BA"
    | "CE"
    | "DF"
    | "ES"
    | "GO"
    | "MA"
    | "MG"
    | "MS"
    | "MT"
    | "PA"
    | "PB"
    | "PE"
    | "PI"
    | "PR"
    | "RJ"
    | "RN"
    | "RO"
    | "RR"
    | "RS"
    | "SC"
    | "SP"
    | "SE"
    | "TO"
  )[];
  /**
   * C√≥digos de endere√ßamento postal a serem inclu√≠dos, separados por v√≠rgula.
   * @minLength 8
   * @maxLength 8
   * @example "01430000,01452922,01310100"
   */
  "address.zip.in"?: string[];
  /**
   * C√≥digo de endere√ßamento postal maior ou igual ao especificado.
   * @format numeric
   * @minLength 8
   * @maxLength 8
   * @example "01452922"
   */
  "address.zip.gte"?: string;
  /**
   * C√≥digo de endere√ßamento postal menor ou igual ao especificado.
   * @format numeric
   * @minLength 8
   * @maxLength 8
   * @example "01452922"
   */
  "address.zip.lte"?: string;
  /**
   * C√≥digos dos pa√≠ses a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [M49 ü°≠](https://unstats.un.org/unsd/methodology/m49/).
   * @example "32,152,600"
   */
  "address.country.id.in"?: number[];
  /**
   * C√≥digos dos pa√≠ses a serem exclu√≠dos, separados por v√≠rgula, conforme
   * [M49 ü°≠](https://unstats.un.org/unsd/methodology/m49/).
   * @example "32,152,600"
   */
  "address.country.id.nin"?: number[];
  /**
   * Indicador de exist√™ncia de telefone:
   * - `true`: Apenas estabelecimentos com telefone.
   * - `false`: Apenas estabelecimentos sem telefone.
   * @example true
   */
  "phones.ex"?: boolean;
  /**
   * Tipos de telefone a serem inclu√≠dos, separados por v√≠rgula.
   * @example "LANDLINE,MOBILE"
   */
  "phones.type.in"?: ("LANDLINE" | "MOBILE")[];
  /**
   * C√≥digos de DDD a serem inclu√≠dos, separados por v√≠rgula.
   * @minLength 2
   * @maxLength 2
   * @example "11,13,15"
   */
  "phones.area.in"?: string[];
  /**
   * C√≥digos de DDD maior ou igual ao especificado.
   * @format numeric
   * @minLength 2
   * @maxLength 2
   * @example "11"
   */
  "phones.area.gte"?: string;
  /**
   * C√≥digos de DDD menor ou igual ao especificado.
   * @format numeric
   * @minLength 2
   * @maxLength 2
   * @example "11"
   */
  "phones.area.lte"?: string;
  /**
   * N√∫meros de telefone a serem inclu√≠dos, separados por v√≠rgula.
   * @minLength 8
   * @maxLength 8
   * @example "92635835,44594576,36285962"
   */
  "phones.number.in"?: string[];
  /**
   * N√∫meros de telefone a serem exclu√≠dos, separados por v√≠rgula.
   * @minLength 8
   * @maxLength 8
   * @example "92635835,44594576,36285962"
   */
  "phones.number.nin"?: string[];
  /**
   * Indicador de exist√™ncia de e-mail:
   * - `true`: Apenas estabelecimentos com e-mail.
   * - `false`: Apenas estabelecimentos sem e-mail.
   * @example true
   */
  "emails.ex"?: boolean;
  /**
   * Tipos de propriedade de e-mail a serem inclu√≠dos, separados por v√≠rgula.
   * @example "CORPORATE,ACCOUNTING"
   */
  "emails.ownership.in"?: ("ACCOUNTING" | "CORPORATE" | "PERSONAL")[];
  /**
   * Endere√ßos de e-mail a serem inclu√≠dos, separados por v√≠rgula.
   * @example "alex.costa@company.com,jane.doe@gmail.com,support@domain.com"
   */
  "emails.address.in"?: string[];
  /**
   * Endere√ßos de e-mail a serem exclu√≠dos, separados por v√≠rgula.
   * @example "alex.costa@company.com,jane.doe@gmail.com,support@domain.com"
   */
  "emails.address.nin"?: string[];
  /**
   * Dom√≠nios de e-mail a serem inclu√≠dos, separados por v√≠rgula.
   * @example "cnpja.com,bb.com.br,ambev.com.br"
   */
  "emails.domain.in"?: string[];
  /**
   * Dom√≠nios de e-mail a serem exclu√≠dos, separados por v√≠rgula.
   * @example "gmail.com,hotmail.com,yahoo.com"
   */
  "emails.domain.nin"?: string[];
  /**
   * C√≥digos das atividades econ√¥micas principais ou secund√°rias a serem inclu√≠dos, separados por v√≠rgula,
   * conforme [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @example "0111301,1011201,3511501"
   */
  "activities.id.in"?: number[];
  /**
   * C√≥digos das atividades econ√¥micas principais ou secund√°rias a serem exclu√≠dos, separados por v√≠rgula,
   * conforme [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @example "0111301,1011201,3511501"
   */
  "activities.id.nin"?: number[];
  /**
   * C√≥digos das atividades econ√¥micas principais a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @example "0111301,1011201,3511501"
   */
  "mainActivity.id.in"?: number[];
  /**
   * C√≥digos das atividades econ√¥micas principais a serem exclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @example "0111301,1011201,3511501"
   */
  "mainActivity.id.nin"?: number[];
  /**
   * C√≥digos das atividades econ√¥micas secund√°rias a serem inclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @example "0111301,1011201,3511501"
   */
  "sideActivities.id.in"?: number[];
  /**
   * C√≥digos das atividades econ√¥micas secund√°rias a serem exclu√≠dos, separados por v√≠rgula, conforme
   * [IBGE ü°≠](https://concla.ibge.gov.br/busca-online-cnae.html?view=estrutura).
   * @example "0111301,1011201,3511501"
   */
  "sideActivities.id.nin"?: number[];
}

export interface OfficeMapDto {
  /**
   * Largura em pixels.
   * @format integer
   * @min 80
   * @max 640
   * @default 640
   */
  width?: number;
  /**
   * Altura em pixels.
   * @format integer
   * @min 80
   * @max 640
   * @default 640
   */
  height?: number;
  /**
   * Multiplicador de densidade de pixels.
   * @format integer
   * @min 1
   * @max 2
   * @default 1
   */
  scale?: number;
  /**
   * N√≠vel de amplia√ß√£o.
   * @format integer
   * @min 1
   * @max 20
   * @default 17
   */
  zoom?: number;
  /**
   * Tipo do mapa:
   * - `roadmap`: Rodovias.
   * - `terrain`: Eleva√ß√£o.
   * - `satellite`: Sat√©lite.
   * - `hybrid`: Rodovias e sat√©lite.
   * @default "roadmap"
   */
  type?: "roadmap" | "terrain" | "satellite" | "hybrid";
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
}

export interface OfficeStreetDto {
  /**
   * Largura em pixels.
   * @format integer
   * @min 80
   * @max 640
   * @default 640
   */
  width?: number;
  /**
   * Altura em pixels.
   * @format integer
   * @min 80
   * @max 640
   * @default 640
   */
  height?: number;
  /**
   * Campo de vis√£o em graus.
   * @format integer
   * @min 60
   * @max 120
   * @default 90
   */
  fov?: number;
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
}

export interface ListSearchDto {
  /**
   * Token de pagina√ß√£o, mutualmente exclusivo com as demais propriedades.
   * @format not empty
   * @minLength 32
   * @maxLength 32
   * @example "8d47bdcbde4a7a2d4a98d5f555a19701"
   */
  token?: string;
  /**
   * Quantidade de registros a serem lidos por p√°gina.
   * @format integer
   * @min 1
   * @max 1000
   * @default 10
   */
  limit?: number;
  /**
   * Termo a ser pesquisado no t√≠tulo ou descri√ß√£o.
   * @format not empty
   * @minLength 1
   * @example "Clientes"
   */
  search?: string;
}

export interface ListExportSearchDto {
  /**
   * Token de pagina√ß√£o, mutualmente exclusivo com as demais propriedades.
   * @format not empty
   * @minLength 32
   * @maxLength 32
   * @example "8d47bdcbde4a7a2d4a98d5f555a19701"
   */
  token?: string;
  /**
   * Quantidade de registros a serem lidos por p√°gina.
   * @format integer
   * @min 1
   * @max 1000
   * @default 10
   */
  limit?: number;
  /**
   * C√≥digo da lista.
   * @format uuid
   * @example "97d34b55-ecba-4e22-bd05-9e27ff24632b"
   */
  listId: string;
}

export interface ConsultaCnpjParams {
  /**
   * Habilita retornar dados em cache caso a busca em tempo real falhe.
   * @default true
   */
  enable_cache_fallback?: boolean;
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite.
   * @format integer
   * @min 0
   * @default 45
   */
  company_max_age?: number;
  /**
   * +**1 ‚Ç™** Adiciona as informa√ß√µes de op√ß√£o pelo Simples e
   * enquadramento no MEI.
   * @format integer
   * @min 0
   * @example 1
   */
  simples_max_age?: number;
  /**
   * +**1 ‚Ç™** Adiciona a lista de Inscri√ß√µes Estaduais.
   * @format integer
   * @min 0
   * @example 1
   */
  sintegra_max_age?: number;
  /**
   * N√∫mero do CNPJ sem pontua√ß√£o.
   * @format cnpj
   * @example "37335118000180"
   */
  taxId: string;
}

export interface CccReadDto {
  /**
   * CNPJ ou CPF de produtor rural
   * @format cnpj|cpf
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * Unidades Federativas para consulta separadas por v√≠rgula, utilize `BR` para considerar todas.
   * Consultas de CPF de produtor rural exigem informar a UF exata.
   * @example "PR,RS,SC"
   */
  states: (
    | "BR"
    | "AC"
    | "AL"
    | "AM"
    | "AP"
    | "BA"
    | "CE"
    | "DF"
    | "ES"
    | "GO"
    | "MA"
    | "MG"
    | "MS"
    | "MT"
    | "PA"
    | "PB"
    | "PE"
    | "PI"
    | "PR"
    | "RJ"
    | "RN"
    | "RO"
    | "RR"
    | "RS"
    | "SC"
    | "SP"
    | "SE"
    | "TO"
  )[];
  /**
   * Estrat√©gia de cache utilizada na aquisi√ß√£o dos dados:
   * - `CACHE`: Entrega os dados do cache, evitando cobran√ßas de cr√©ditos, se os dados n√£o estiverem dispon√≠veis resultar√° em um erro 404.
   * - `CACHE_IF_FRESH`: Retorna os dados do cache respeitando o limite em `maxAge`, se os dados estiverem desatualizados ser√° consultado online.
   * - `CACHE_IF_ERROR`: Idem ao `CACHE_IF_FRESH`, mas se a consulta online falhar retorna os dados do cache respeitando o limite em `maxStale`.
   * - `ONLINE`: Consulta diretamente online, n√£o recomendado pois ignora qualquer cache, sugerimos configurar `maxAge=1` como alternativa.
   * @default "CACHE_IF_ERROR"
   */
  strategy?: "ONLINE" | "CACHE_IF_FRESH" | "CACHE_IF_ERROR" | "CACHE";
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite, relevante para as estrat√©gias `CACHE_IF_FRESH` e `CACHE_IF_ERROR`.
   * @format integer
   * @min 1
   * @max 3650
   * @default 45
   */
  maxAge?: number;
  /**
   * Idade m√°xima, em dias, que um dado em cache √© aceite em caso de erro na busca online, relevante apenas para a estrat√©gia `CACHE_IF_FRESH`.
   * @format integer
   * @min 1
   * @max 3650
   * @default 365
   */
  maxStale?: number;
  /** Aguarda a compensa√ß√£o dos cr√©ditos de forma s√≠ncrona, retornando o cabe√ßalho `cnpja-request-cost`. */
  sync?: boolean;
}

export interface CccCertificateDto {
  /**
   * N√∫mero do CNPJ ou CPF sem pontua√ß√£o.
   * @format cnpj|cpf
   * @example "37335118000180"
   */
  taxId: string;
  /**
   * Unidade Federativa de origem. Consultas de CPF de produtor rural exigem informar a UF exata.
   * @example "SP"
   */
  state?:
    | "AC"
    | "AL"
    | "AM"
    | "AP"
    | "BA"
    | "CE"
    | "DF"
    | "ES"
    | "GO"
    | "MA"
    | "MG"
    | "MS"
    | "MT"
    | "PA"
    | "PB"
    | "PE"
    | "PI"
    | "PR"
    | "RJ"
    | "RN"
    | "RO"
    | "RR"
    | "RS"
    | "SC"
    | "SP"
    | "SE"
    | "TO";
}
